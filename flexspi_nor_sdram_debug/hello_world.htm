<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [flexspi_nor_sdram_debug\hello_world.out]</title></head>
<body><HR>
<H1>Static Call Graph for image flexspi_nor_sdram_debug\hello_world.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Feb 15 18:46:18 2023
<BR><P>
<H3>Maximum Stack Usage =       1192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tcpecho_main &rArr; netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[85]">ACMP1_IRQHandler</a>
 <LI><a href="#[86]">ACMP2_IRQHandler</a>
 <LI><a href="#[87]">ACMP3_IRQHandler</a>
 <LI><a href="#[88]">ACMP4_IRQHandler</a>
 <LI><a href="#[4d]">ADC1_IRQHandler</a>
 <LI><a href="#[4e]">ADC2_IRQHandler</a>
 <LI><a href="#[83]">ADC_ETC_ERROR_IRQ_IRQHandler</a>
 <LI><a href="#[80]">ADC_ETC_IRQ0_IRQHandler</a>
 <LI><a href="#[81]">ADC_ETC_IRQ1_IRQHandler</a>
 <LI><a href="#[82]">ADC_ETC_IRQ2_IRQHandler</a>
 <LI><a href="#[41]">BEE_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[c7]">CAN1_DriverIRQHandler</a>
 <LI><a href="#[c8]">CAN2_DriverIRQHandler</a>
 <LI><a href="#[69]">CCM_1_IRQHandler</a>
 <LI><a href="#[6a]">CCM_2_IRQHandler</a>
 <LI><a href="#[1d]">CORE_IRQHandler</a>
 <LI><a href="#[35]">CSI_IRQHandler</a>
 <LI><a href="#[3b]">CSU_IRQHandler</a>
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a>
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a>
 <LI><a href="#[4f]">DCDC_IRQHandler</a>
 <LI><a href="#[3c]">DCP_IRQHandler</a>
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a>
 <LI><a href="#[a6]">DMA0_DMA16_DriverIRQHandler</a>
 <LI><a href="#[b0]">DMA10_DMA26_DriverIRQHandler</a>
 <LI><a href="#[b1]">DMA11_DMA27_DriverIRQHandler</a>
 <LI><a href="#[b2]">DMA12_DMA28_DriverIRQHandler</a>
 <LI><a href="#[b3]">DMA13_DMA29_DriverIRQHandler</a>
 <LI><a href="#[b4]">DMA14_DMA30_DriverIRQHandler</a>
 <LI><a href="#[b5]">DMA15_DMA31_DriverIRQHandler</a>
 <LI><a href="#[a7]">DMA1_DMA17_DriverIRQHandler</a>
 <LI><a href="#[a8]">DMA2_DMA18_DriverIRQHandler</a>
 <LI><a href="#[a9]">DMA3_DMA19_DriverIRQHandler</a>
 <LI><a href="#[aa]">DMA4_DMA20_DriverIRQHandler</a>
 <LI><a href="#[ab]">DMA5_DMA21_DriverIRQHandler</a>
 <LI><a href="#[ac]">DMA6_DMA22_DriverIRQHandler</a>
 <LI><a href="#[ad]">DMA7_DMA23_DriverIRQHandler</a>
 <LI><a href="#[ae]">DMA8_DMA24_DriverIRQHandler</a>
 <LI><a href="#[af]">DMA9_DMA25_DriverIRQHandler</a>
 <LI><a href="#[b6]">DMA_ERROR_DriverIRQHandler</a>
 <LI><a href="#[7]">DebugMon_Handler</a>
 <LI><a href="#[a2]">DefaultISR</a>
 <LI><a href="#[8b]">ENC1_IRQHandler</a>
 <LI><a href="#[8c]">ENC2_IRQHandler</a>
 <LI><a href="#[8d]">ENC3_IRQHandler</a>
 <LI><a href="#[8e]">ENC4_IRQHandler</a>
 <LI><a href="#[68]">EWM_IRQHandler</a>
 <LI><a href="#[ce]">FLEXIO1_DriverIRQHandler</a>
 <LI><a href="#[cf]">FLEXIO2_DriverIRQHandler</a>
 <LI><a href="#[30]">FLEXRAM_IRQHandler</a>
 <LI><a href="#[d0]">FLEXSPI_DriverIRQHandler</a>
 <LI><a href="#[6b]">GPC_IRQHandler</a>
 <LI><a href="#[52]">GPIO1_INT0_IRQHandler</a>
 <LI><a href="#[53]">GPIO1_INT1_IRQHandler</a>
 <LI><a href="#[54]">GPIO1_INT2_IRQHandler</a>
 <LI><a href="#[55]">GPIO1_INT3_IRQHandler</a>
 <LI><a href="#[56]">GPIO1_INT4_IRQHandler</a>
 <LI><a href="#[57]">GPIO1_INT5_IRQHandler</a>
 <LI><a href="#[58]">GPIO1_INT6_IRQHandler</a>
 <LI><a href="#[59]">GPIO1_INT7_IRQHandler</a>
 <LI><a href="#[5c]">GPIO2_Combined_0_15_IRQHandler</a>
 <LI><a href="#[5d]">GPIO2_Combined_16_31_IRQHandler</a>
 <LI><a href="#[5f]">GPIO3_Combined_16_31_IRQHandler</a>
 <LI><a href="#[60]">GPIO4_Combined_0_15_IRQHandler</a>
 <LI><a href="#[61]">GPIO4_Combined_16_31_IRQHandler</a>
 <LI><a href="#[63]">GPIO5_Combined_16_31_IRQHandler</a>
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a>
 <LI><a href="#[6e]">GPT1_IRQHandler</a>
 <LI><a href="#[31]">KPP_IRQHandler</a>
 <LI><a href="#[34]">LCDIF_IRQHandler</a>
 <LI><a href="#[c3]">LPSPI1_DriverIRQHandler</a>
 <LI><a href="#[c4]">LPSPI2_DriverIRQHandler</a>
 <LI><a href="#[c5]">LPSPI3_DriverIRQHandler</a>
 <LI><a href="#[c6]">LPSPI4_DriverIRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[47]">PMU_EVENT_IRQHandler</a>
 <LI><a href="#[70]">PWM1_0_IRQHandler</a>
 <LI><a href="#[71]">PWM1_1_IRQHandler</a>
 <LI><a href="#[72]">PWM1_2_IRQHandler</a>
 <LI><a href="#[73]">PWM1_3_IRQHandler</a>
 <LI><a href="#[74]">PWM1_FAULT_IRQHandler</a>
 <LI><a href="#[93]">PWM2_0_IRQHandler</a>
 <LI><a href="#[94]">PWM2_1_IRQHandler</a>
 <LI><a href="#[95]">PWM2_2_IRQHandler</a>
 <LI><a href="#[96]">PWM2_3_IRQHandler</a>
 <LI><a href="#[97]">PWM2_FAULT_IRQHandler</a>
 <LI><a href="#[98]">PWM3_0_IRQHandler</a>
 <LI><a href="#[99]">PWM3_1_IRQHandler</a>
 <LI><a href="#[9a]">PWM3_2_IRQHandler</a>
 <LI><a href="#[9b]">PWM3_3_IRQHandler</a>
 <LI><a href="#[9c]">PWM3_FAULT_IRQHandler</a>
 <LI><a href="#[9d]">PWM4_0_IRQHandler</a>
 <LI><a href="#[9e]">PWM4_1_IRQHandler</a>
 <LI><a href="#[9f]">PWM4_2_IRQHandler</a>
 <LI><a href="#[a0]">PWM4_3_IRQHandler</a>
 <LI><a href="#[a1]">PWM4_FAULT_IRQHandler</a>
 <LI><a href="#[36]">PXP_IRQHandler</a>
 <LI><a href="#[67]">RTWDOG_IRQHandler</a>
 <LI><a href="#[6d]">Reserved115_IRQHandler</a>
 <LI><a href="#[75]">Reserved123_IRQHandler</a>
 <LI><a href="#[89]">Reserved143_IRQHandler</a>
 <LI><a href="#[8a]">Reserved144_IRQHandler</a>
 <LI><a href="#[3e]">Reserved68_IRQHandler</a>
 <LI><a href="#[48]">Reserved78_IRQHandler</a>
 <LI><a href="#[50]">Reserved86_IRQHandler</a>
 <LI><a href="#[51]">Reserved87_IRQHandler</a>
 <LI><a href="#[c9]">SAI1_DriverIRQHandler</a>
 <LI><a href="#[ca]">SAI2_DriverIRQHandler</a>
 <LI><a href="#[cb]">SAI3_RX_DriverIRQHandler</a>
 <LI><a href="#[cc]">SAI3_TX_DriverIRQHandler</a>
 <LI><a href="#[77]">SEMC_IRQHandler</a>
 <LI><a href="#[40]">SJC_IRQHandler</a>
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a>
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a>
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a>
 <LI><a href="#[cd]">SPDIF_DriverIRQHandler</a>
 <LI><a href="#[6c]">SRC_IRQHandler</a>
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a>
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a>
 <LI><a href="#[92]">TMR4_IRQHandler</a>
 <LI><a href="#[3f]">TRNG_IRQHandler</a>
 <LI><a href="#[32]">TSC_DIG_IRQHandler</a>
 <LI><a href="#[4b]">USB_PHY1_IRQHandler</a>
 <LI><a href="#[4c]">USB_PHY2_IRQHandler</a>
 <LI><a href="#[d1]">USDHC1_DriverIRQHandler</a>
 <LI><a href="#[d2]">USDHC2_DriverIRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[66]">WDOG1_IRQHandler</a>
 <LI><a href="#[37]">WDOG2_IRQHandler</a>
 <LI><a href="#[7e]">XBAR1_IRQ_0_1_IRQHandler</a>
 <LI><a href="#[7f]">XBAR1_IRQ_2_3_IRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a>
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a>
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a>
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a>
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a>
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a>
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a>
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a>
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a>
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a>
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a>
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a>
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a>
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a>
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a>
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a>
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a>
 <LI><a href="#[1f]">LPUART2_IRQHandler</a>
 <LI><a href="#[20]">LPUART3_IRQHandler</a>
 <LI><a href="#[21]">LPUART4_IRQHandler</a>
 <LI><a href="#[22]">LPUART5_IRQHandler</a>
 <LI><a href="#[23]">LPUART6_IRQHandler</a>
 <LI><a href="#[24]">LPUART7_IRQHandler</a>
 <LI><a href="#[25]">LPUART8_IRQHandler</a>
 <LI><a href="#[26]">LPI2C1_IRQHandler</a>
 <LI><a href="#[27]">LPI2C2_IRQHandler</a>
 <LI><a href="#[28]">LPI2C3_IRQHandler</a>
 <LI><a href="#[29]">LPI2C4_IRQHandler</a>
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a>
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a>
 <LI><a href="#[2c]">LPSPI3_IRQHandler</a>
 <LI><a href="#[2d]">LPSPI4_IRQHandler</a>
 <LI><a href="#[2e]">CAN1_IRQHandler</a>
 <LI><a href="#[2f]">CAN2_IRQHandler</a>
 <LI><a href="#[42]">SAI1_IRQHandler</a>
 <LI><a href="#[43]">SAI2_IRQHandler</a>
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a>
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a>
 <LI><a href="#[46]">SPDIF_IRQHandler</a>
 <LI><a href="#[64]">FLEXIO1_IRQHandler</a>
 <LI><a href="#[65]">FLEXIO2_IRQHandler</a>
 <LI><a href="#[76]">FLEXSPI_IRQHandler</a>
 <LI><a href="#[78]">USDHC1_IRQHandler</a>
 <LI><a href="#[79]">USDHC2_IRQHandler</a>
 <LI><a href="#[7c]">ENET_IRQHandler</a>
 <LI><a href="#[7d]">ENET_1588_Timer_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[242]">stream_mpg_enable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">protocol_enqueue_realtime_command</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ACMP1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[86]">ACMP2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[87]">ACMP3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[88]">ACMP4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4d]">ADC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4e]">ADC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[83]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[80]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[81]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[82]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[41]">BEE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c7]">CAN1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2e]">CAN1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c8]">CAN2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2f]">CAN2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[69]">CCM_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6a]">CCM_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[1d]">CORE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[35]">CSI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3b]">CSU_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4f]">DCDC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3c]">DCP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a6]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b0]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b1]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b2]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b3]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b4]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b5]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a7]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a8]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a9]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[aa]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ab]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ac]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ad]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ae]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[af]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b6]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d7]">DbgConsole_Putchar</a> from fsl_debug_console.o(.text.DbgConsole_Putchar) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a2]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[a2]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced 87 times from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8b]">ENC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8c]">ENC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8d]">ENC3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8e]">ENC4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d4]">ENET_1588_Timer_DriverIRQHandler</a> from fsl_enet.o(.text.ENET_1588_Timer_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7d]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d3]">ENET_DriverIRQHandler</a> from fsl_enet.o(.text.ENET_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[da]">ENET_ErrorIRQHandler</a> from fsl_enet.o(.text.ENET_ErrorIRQHandler) referenced 2 times from fsl_enet.o(.text.ENET_SetHandler)
 <LI><a href="#[7c]">ENET_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ef]">ENET_MDIO_Init</a> from fsl_enet_mdio.o(.text.ENET_MDIO_Init) referenced from fsl_enet_mdio.o(.rodata.enet_ops)
 <LI><a href="#[f1]">ENET_MDIO_Read</a> from fsl_enet_mdio.o(.text.ENET_MDIO_Read) referenced from fsl_enet_mdio.o(.rodata.enet_ops)
 <LI><a href="#[f3]">ENET_MDIO_ReadExt</a> from fsl_enet_mdio.o(.text.ENET_MDIO_ReadExt) referenced from fsl_enet_mdio.o(.rodata.enet_ops)
 <LI><a href="#[f0]">ENET_MDIO_Write</a> from fsl_enet_mdio.o(.text.ENET_MDIO_Write) referenced from fsl_enet_mdio.o(.rodata.enet_ops)
 <LI><a href="#[f2]">ENET_MDIO_WriteExt</a> from fsl_enet_mdio.o(.text.ENET_MDIO_WriteExt) referenced from fsl_enet_mdio.o(.rodata.enet_ops)
 <LI><a href="#[d9]">ENET_ReceiveIRQHandler</a> from fsl_enet.o(.text.ENET_ReceiveIRQHandler) referenced 2 times from fsl_enet.o(.text.ENET_SetHandler)
 <LI><a href="#[d8]">ENET_TransmitIRQHandler</a> from fsl_enet.o(.text.ENET_TransmitIRQHandler) referenced 2 times from fsl_enet.o(.text.ENET_SetHandler)
 <LI><a href="#[68]">EWM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ce]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[64]">FLEXIO1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cf]">FLEXIO2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[65]">FLEXIO2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[30]">FLEXRAM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d0]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[76]">FLEXSPI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6b]">GPC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5a]">GPIO1_Combined_0_15_IRQHandler</a> from bsp_key_it.o(.text.GPIO1_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5b]">GPIO1_Combined_16_31_IRQHandler</a> from driver.o(.text.GPIO1_Combined_16_31_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[52]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[53]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[54]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[55]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[56]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[57]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[58]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[59]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5c]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5d]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5e]">GPIO3_Combined_0_15_IRQHandler</a> from driver.o(.text.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5f]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[60]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[61]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[62]">GPIO5_Combined_0_15_IRQHandler</a> from bsp_key_it.o(.text.GPIO5_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[63]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6e]">GPT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6f]">GPT2_IRQHandler</a> from bsp_gpt.o(.text.GPT2_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d6]">HAL_UartReceiveBlocking</a> from fsl_adapter_lpuart.o(.text.HAL_UartReceiveBlocking) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Init)
 <LI><a href="#[d5]">HAL_UartSendBlocking</a> from fsl_adapter_lpuart.o(.text.HAL_UartSendBlocking) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[31]">KPP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[34]">LCDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bf]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[26]">LPI2C1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c0]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[27]">LPI2C2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c1]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[28]">LPI2C3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c2]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[29]">LPI2C4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c3]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c4]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c5]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2c]">LPSPI3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c6]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2d]">LPSPI4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b7]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1e]">LPUART1_IRQHandler</a> from serial.o(.text.LPUART1_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b8]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1f]">LPUART2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b9]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[20]">LPUART3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ba]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[21]">LPUART4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bb]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[22]">LPUART5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bc]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[23]">LPUART6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bd]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[24]">LPUART7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[be]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[25]">LPUART8_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[fc]">PHY_LAN8720A_GetAutoNegotiationStatus</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_GetAutoNegotiationStatus) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[fe]">PHY_LAN8720A_GetLinkSpeedDuplex</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_GetLinkSpeedDuplex) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[fd]">PHY_LAN8720A_GetLinkStatus</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_GetLinkStatus) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[f9]">PHY_LAN8720A_Init</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_Init) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[fb]">PHY_LAN8720A_Read</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_Read) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[ff]">PHY_LAN8720A_SetLinkSpeedDuplex</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_SetLinkSpeedDuplex) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[fa]">PHY_LAN8720A_Write</a> from fsl_phylan8720a.o(.text.PHY_LAN8720A_Write) referenced from fsl_phylan8720a.o(.rodata.phylan8720a_ops)
 <LI><a href="#[84]">PIT_IRQHandler</a> from driver.o(.text.PIT_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[47]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[70]">PWM1_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[71]">PWM1_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[72]">PWM1_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[73]">PWM1_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[74]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[93]">PWM2_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[94]">PWM2_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[95]">PWM2_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[96]">PWM2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[97]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[98]">PWM3_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[99]">PWM3_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9a]">PWM3_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9b]">PWM3_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9c]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9d]">PWM4_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9e]">PWM4_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9f]">PWM4_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a0]">PWM4_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a1]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[36]">PXP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[67]">RTWDOG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6d]">Reserved115_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[75]">Reserved123_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[89]">Reserved143_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8a]">Reserved144_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3e]">Reserved68_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[48]">Reserved78_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c9]">SAI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[42]">SAI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ca]">SAI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[43]">SAI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cb]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cc]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[77]">SEMC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[40]">SJC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cd]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[46]">SPDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6c]">SRC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a4]">SystemInit</a> from system_mimxrt1052.o(.text.SystemInit) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8f]">TMR1_IRQHandler</a> from driver.o(.text.TMR1_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[90]">TMR2_IRQHandler</a> from driver.o(.text.TMR2_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[91]">TMR3_IRQHandler</a> from bsp_tmr.o(.text.TMR3_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[92]">TMR4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3f]">TRNG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[32]">TSC_DIG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7b]">USB_OTG1_IRQHandler</a> from bsp_usb_vom.o(.text.USB_OTG1_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7a]">USB_OTG2_IRQHandler</a> from bsp_usb_vom.o(.text.USB_OTG2_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4b]">USB_PHY1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4c]">USB_PHY2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d1]">USDHC1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[78]">USDHC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d2]">USDHC2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[79]">USDHC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[66]">WDOG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[37]">WDOG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7e]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7f]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[f7]">dhcp_coarse_tmr</a> from dhcp.o(.text.dhcp_coarse_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[f8]">dhcp_fine_tmr</a> from dhcp.o(.text.dhcp_fine_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[db]">dhcp_recv</a> from dhcp.o(.text.dhcp_recv) referenced 2 times from dhcp.o(.text.dhcp_inc_pcb_refcount)
 <LI><a href="#[df]">etharp_output</a> from etharp.o(.text.etharp_output) referenced 2 times from enet_ethernetif.o(.text.ethernetif_init)
 <LI><a href="#[f6]">etharp_tmr</a> from etharp.o(.text.etharp_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[e8]">ethernet_input</a> from ethernet.o(.text.ethernet_input) referenced 2 times from lwip_tcpecho_test.o(.text.tcpecho_main)
 <LI><a href="#[e9]">ethernetif0_init</a> from enet_ethernetif_kinetis.o(.text.ethernetif0_init) referenced 2 times from lwip_tcpecho_test.o(.text.tcpecho_main)
 <LI><a href="#[e0]">ethernetif_linkoutput</a> from enet_ethernetif_kinetis.o(.text.ethernetif_linkoutput) referenced 2 times from enet_ethernetif.o(.text.ethernetif_init)
 <LI><a href="#[dc]">ethernetif_rx_alloc</a> from enet_ethernetif_kinetis.o(.text.ethernetif_rx_alloc) referenced 2 times from enet_ethernetif_kinetis.o(.text.ethernetif_enet_init)
 <LI><a href="#[dd]">ethernetif_rx_free</a> from enet_ethernetif_kinetis.o(.text.ethernetif_rx_free) referenced 2 times from enet_ethernetif_kinetis.o(.text.ethernetif_enet_init)
 <LI><a href="#[de]">ethernetif_rx_release</a> from enet_ethernetif_kinetis.o(.text.ethernetif_rx_release) referenced 2 times from enet_ethernetif_kinetis.o(.text.ethernetif_enet_init)
 <LI><a href="#[f5]">ip_reass_tmr</a> from ip4_frag.o(.text.ip_reass_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[e1]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(.text.ipfrag_free_pbuf_custom) referenced 2 times from ip4_frag.o(.text.ip4_frag)
 <LI><a href="#[e2]">lwip_cyclic_timer</a> from timeouts.o(.text.lwip_cyclic_timer) referenced 4 times from timeouts.o(.text.lwip_cyclic_timer)
 <LI><a href="#[e2]">lwip_cyclic_timer</a> from timeouts.o(.text.lwip_cyclic_timer) referenced 2 times from timeouts.o(.text.sys_timeouts_init)
 <LI><a href="#[a3]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[e3]">netif_null_output_ip4</a> from netif.o(.text.netif_null_output_ip4) referenced 2 times from netif.o(.text.netif_add)
 <LI><a href="#[100]">protocol_enqueue_realtime_command</a> from protocol.o(.text.protocol_enqueue_realtime_command) referenced from serial.o(.data.enqueue_realtime_command)
 <LI><a href="#[e4]">st_deenergize</a> from stepper.o(.text.st_deenergize) referenced 2 times from stepper.o(.text.st_go_idle)
 <LI><a href="#[e6]">tcp_accept_null</a> from tcp.o(.text.tcp_accept_null) referenced 2 times from tcp.o(.text.tcp_listen_with_backlog_and_err)
 <LI><a href="#[e5]">tcp_recv_null</a> from tcp.o(.text.tcp_recv_null) referenced 2 times from tcp.o(.text.tcp_alloc)
 <LI><a href="#[f4]">tcp_tmr</a> from tcp.o(.text.tcp_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[ee]">tcpecho_raw_accept</a> from tcpecho_raw.o(.text.tcpecho_raw_accept) referenced 2 times from tcpecho_raw.o(.text.tcpecho_raw_init)
 <LI><a href="#[eb]">tcpecho_raw_error</a> from tcpecho_raw.o(.text.tcpecho_raw_error) referenced 2 times from tcpecho_raw.o(.text.tcpecho_raw_accept)
 <LI><a href="#[ec]">tcpecho_raw_poll</a> from tcpecho_raw.o(.text.tcpecho_raw_poll) referenced 2 times from tcpecho_raw.o(.text.tcpecho_raw_accept)
 <LI><a href="#[ed]">tcpecho_raw_sent</a> from tcpecho_raw.o(.text.tcpecho_raw_sent) referenced 2 times from tcpecho_raw.o(.text.tcpecho_raw_accept)
 <LI><a href="#[ed]">tcpecho_raw_sent</a> from tcpecho_raw.o(.text.tcpecho_raw_sent) referenced 2 times from tcpecho_raw.o(.text.tcpecho_raw_sent)
 <LI><a href="#[ea]">tcpecho_recv</a> from tcpecho_raw.o(.text.tcpecho_recv) referenced 2 times from tcpecho_raw.o(.text.tcpecho_raw_accept)
 <LI><a href="#[e7]">tcpip_tcp_timer</a> from timeouts.o(.text.tcpip_tcp_timer) referenced 2 times from timeouts.o(.text.tcp_timer_needed)
 <LI><a href="#[e7]">tcpip_tcp_timer</a> from timeouts.o(.text.tcpip_tcp_timer) referenced 2 times from timeouts.o(.text.tcpip_tcp_timer)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[29d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[101]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[106]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[29f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2a0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2a1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2a2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[86]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[87]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[88]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>ADC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[83]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[80]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[82]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>BEE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[c7]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>CORE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>CSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>CSU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>DCDC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>DCP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a6]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a2]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8b]"></a>ENC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8c]"></a>ENC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8d]"></a>ENC3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8e]"></a>ENC4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[68]"></a>EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[ce]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d0]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>GPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[61]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6e]"></a>GPT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>KPP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[c3]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[71]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[93]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[94]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[95]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[96]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[98]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[99]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9a]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9b]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9d]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9e]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9f]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a1]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>PXP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[67]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[75]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[89]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[c9]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>SEMC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>SJC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[cd]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>SRC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[92]"></a>TMR4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>TRNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d1]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7f]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[64]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[65]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[76]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[78]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[79]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7c]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7d]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a3]"></a>____aeabi_memcpy4$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial_pbuf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>

<P><STRONG><a name="[2a9]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetDefaultConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_recv
</UL>

<P><STRONG><a name="[152]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[1ec]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[102]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1658 bytes, Stack size 56 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_MQSConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_EnableMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetXtalFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRtcXtalFreq
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[118]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 856 bytes, Stack size 56 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BOARD_ConfigMPU &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMux
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[121]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock_config.o(.text.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>BOARD_InitBootPins</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(.text.BOARD_InitBootPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BOARD_InitBootPins &rArr; BOARD_InitEnetPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitEnetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; HAL_UartInit &rArr; HAL_UartInitCommon &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>BOARD_InitEnetPins</STRONG> (Thumb, 976 bytes, Stack size 200 bytes, pin_mux.o(.text.BOARD_InitEnetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = BOARD_InitEnetPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
</UL>

<P><STRONG><a name="[129]"></a>BOARD_InitModuleClock</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwip_tcpecho_test.o(.text.BOARD_InitModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_InitModuleClock &rArr; CLOCK_InitEnetPll
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[113]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[114]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[13b]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[13d]"></a>CLOCK_GetFreq</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRtcFreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[140]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[11e]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 998 bytes, Stack size 56 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllEnabled
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllBypassed
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[13e]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[145]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[143]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[110]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_InitArmPll
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12a]"></a>CLOCK_InitEnetPll</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitEnetPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitModuleClock
</UL>

<P><STRONG><a name="[10a]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10b]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10c]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_SwitchOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[149]"></a>DCACHE_CleanByRange</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_cache.o(.text.DCACHE_CleanByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCACHE_CleanByRange &rArr; L1CACHE_CleanDCacheByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L1CACHE_CleanDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
</UL>

<P><STRONG><a name="[14b]"></a>DCACHE_InvalidateByRange</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_cache.o(.text.DCACHE_InvalidateByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCACHE_InvalidateByRange &rArr; L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxBufferDescriptors
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferAllocAll
</UL>

<P><STRONG><a name="[125]"></a>DbgConsole_Init</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DbgConsole_Init &rArr; HAL_UartInit &rArr; HAL_UartInitCommon &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[14e]"></a>DbgConsole_Printf</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial_pbuf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[d7]"></a>DbgConsole_Putchar</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[19f]"></a>Driver_IncTick</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver.o(.text.Driver_IncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Driver_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d4]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_1588_Timer_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_1588_Timer_DriverIRQHandler &rArr; ENET_Ptp1588IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Ptp1588IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>ENET_ErrorIRQHandler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_ErrorIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ENET_ErrorIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_EnableSleepMode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet.o(.text.ENET_SetHandler)
</UL>
<P><STRONG><a name="[158]"></a>ENET_GetDefaultConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ENET_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_init
</UL>

<P><STRONG><a name="[156]"></a>ENET_GetInstance</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Ptp1588IRQHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxISRHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxISRHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetErrISRHandler
</UL>

<P><STRONG><a name="[15a]"></a>ENET_Init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ENET_Init &rArr; ENET_Up &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Reset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_init
</UL>

<P><STRONG><a name="[153]"></a>ENET_Ptp1588IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_Ptp1588IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ENET_Ptp1588IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_1588_Timer_DriverIRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>ENET_ReceiveIRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_ReceiveIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ENET_ReceiveIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet.o(.text.ENET_SetHandler)
</UL>
<P><STRONG><a name="[167]"></a>ENET_ReclaimTxDescriptor</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, fsl_enet.o(.text.ENET_ReclaimTxDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ENET_ReclaimTxDescriptor &rArr; ENET_IncreaseIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IncreaseIndex
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_TransmitIRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>ENET_SendFrame</STRONG> (Thumb, 936 bytes, Stack size 80 bytes, fsl_enet.o(.text.ENET_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ENET_SendFrame &rArr; ENET_ActiveSendRing &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_TxDirtyRingAvailable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IncreaseIndex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ActiveSendRing
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_send_frame
</UL>

<P><STRONG><a name="[16f]"></a>ENET_SetErrISRHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_SetErrISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_SetErrISRHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
</UL>

<P><STRONG><a name="[175]"></a>ENET_SetMacAddr</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, fsl_enet.o(.text.ENET_SetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ENET_SetMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
</UL>

<P><STRONG><a name="[173]"></a>ENET_SetRxISRHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_SetRxISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_SetRxISRHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
</UL>

<P><STRONG><a name="[15d]"></a>ENET_SetSMI</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, fsl_enet.o(.text.ENET_SetSMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Init
</UL>

<P><STRONG><a name="[172]"></a>ENET_SetTxISRHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_SetTxISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_SetTxISRHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
</UL>

<P><STRONG><a name="[163]"></a>ENET_StartExtC45SMIReadData</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, fsl_enet.o(.text.ENET_StartExtC45SMIReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_StartExtC45SMIReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_ReadExt
</UL>

<P><STRONG><a name="[166]"></a>ENET_StartExtC45SMIWriteData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fsl_enet.o(.text.ENET_StartExtC45SMIWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ENET_StartExtC45SMIWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WriteExt
</UL>

<P><STRONG><a name="[162]"></a>ENET_StartExtC45SMIWriteReg</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, fsl_enet.o(.text.ENET_StartExtC45SMIWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_StartExtC45SMIWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WriteExt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_ReadExt
</UL>

<P><STRONG><a name="[15f]"></a>ENET_StartSMIRead</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, fsl_enet.o(.text.ENET_StartSMIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_StartSMIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Read
</UL>

<P><STRONG><a name="[165]"></a>ENET_StartSMIWrite</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, fsl_enet.o(.text.ENET_StartSMIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_StartSMIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Write
</UL>

<P><STRONG><a name="[d8]"></a>ENET_TransmitIRQHandler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fsl_enet.o(.text.ENET_TransmitIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ENET_TransmitIRQHandler &rArr; ENET_ReclaimTxDescriptor &rArr; ENET_IncreaseIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReclaimTxDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet.o(.text.ENET_SetHandler)
</UL>
<P><STRONG><a name="[15c]"></a>ENET_Up</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ENET_Up &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxBufferDescriptors
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxBufferDescriptors
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferAllocAll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[5a]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_key_it.o(.text.GPIO1_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO1_Combined_0_15_IRQHandler &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, driver.o(.text.GPIO1_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GPIO1_Combined_16_31_IRQHandler &rArr; systemGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, driver.o(.text.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler &rArr; limitsGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitsGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_key_it.o(.text.GPIO5_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO5_Combined_0_15_IRQHandler &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[181]"></a>GPIO_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[183]"></a>GPIO_PinInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[187]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>

<P><STRONG><a name="[184]"></a>GPIO_PinWrite</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>

<P><STRONG><a name="[6f]"></a>GPT2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_gpt.o(.text.GPT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT2_IRQHandler &rArr; GPT_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[14d]"></a>HAL_UartInit</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, fsl_adapter_lpuart.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_UartInit &rArr; HAL_UartInitCommon &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_UartReceiveBlocking</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, fsl_adapter_lpuart.o(.text.HAL_UartReceiveBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_UartReceiveBlocking &rArr; LPUART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Init)
</UL>
<P><STRONG><a name="[d5]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fsl_adapter_lpuart.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HAL_UartSendBlocking &rArr; LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Init)
</UL>
<P><STRONG><a name="[bf]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, serial.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPUART1_IRQHandler &rArr; ring_fifo_write &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[b8]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fsl_lpuart.o(.text.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART_ClearStatusFlags &rArr; LPUART_GetStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>

<P><STRONG><a name="[195]"></a>LPUART_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[191]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>LPUART_Init</STRONG> (Thumb, 872 bytes, Stack size 56 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>

<P><STRONG><a name="[18e]"></a>LPUART_ReadBlocking</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, fsl_lpuart.o(.text.LPUART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LPUART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
</UL>

<P><STRONG><a name="[18f]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[fc]"></a>PHY_LAN8720A_GetAutoNegotiationStatus</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_GetAutoNegotiationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PHY_LAN8720A_GetAutoNegotiationStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[fe]"></a>PHY_LAN8720A_GetLinkSpeedDuplex</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_GetLinkSpeedDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PHY_LAN8720A_GetLinkSpeedDuplex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[fd]"></a>PHY_LAN8720A_GetLinkStatus</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_GetLinkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PHY_LAN8720A_GetLinkStatus &rArr; MDIO_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[f9]"></a>PHY_LAN8720A_Init</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PHY_LAN8720A_Init &rArr; MDIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Read
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[fb]"></a>PHY_LAN8720A_Read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PHY_LAN8720A_Read &rArr; MDIO_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[ff]"></a>PHY_LAN8720A_SetLinkSpeedDuplex</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_SetLinkSpeedDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PHY_LAN8720A_SetLinkSpeedDuplex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[fa]"></a>PHY_LAN8720A_Write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.PHY_LAN8720A_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PHY_LAN8720A_Write &rArr; MDIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_phylan8720a.o(.rodata.phylan8720a_ops)
</UL>
<P><STRONG><a name="[84]"></a>PIT_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, driver.o(.text.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PIT_IRQHandler &rArr; PIT_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a2]"></a>QTMR_ClearStatusFlags</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>QTMR_GetStatus</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>QTMR_SetTimerPeriod</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_qtmr.o(.text.QTMR_SetTimerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_SetTimerPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; Driver_IncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_isr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_IncTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a4]"></a>SystemInit</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, system_mimxrt1052.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1052.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, driver.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TMR1_IRQHandler &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetStatus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[90]"></a>TMR2_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, driver.o(.text.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TMR2_IRQHandler &rArr; systemGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetStatus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_signals_merge
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemGetState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitsGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[91]"></a>TMR3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_tmr.o(.text.TMR3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR3_IRQHandler &rArr; QTMR_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1ab]"></a>USB_DeviceEhciIsrFunction</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usb_device_ehci.o(.text.USB_DeviceEhciIsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptSof
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptReset
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptPortChange
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>USB_DeviceNotificationTrigger</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceNotificationTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptReset
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptPortChange
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>

<P><STRONG><a name="[7b]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_usb_vom.o(.text.USB_OTG1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USB_OTG1_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_usb_vom.o(.text.USB_OTG2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USB_OTG2_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[11a]"></a>__aeabi_assert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReceiveIRQHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetDefaultConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ErrorIRQHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxBufferDescriptors
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxBufferDescriptors
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferFreeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferAllocAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IncreaseIndex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ActiveSendRing
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_SetLinkSpeedDuplex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_GetLinkSpeedDuplex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_GetAutoNegotiationStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetSMI
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_ReadExt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_TransmitIRQHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReclaimTxDescriptor
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>

<P><STRONG><a name="[296]"></a>delay</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, lwip_tcpecho_test.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[f7]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[f8]"></a>dhcp_fine_tmr</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[1b3]"></a>dhcp_release_and_stop</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_release_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1d7]"></a>dhcp_renew</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[1b4]"></a>dhcp_start</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1d6]"></a>dhcp_supplied_address</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_supplied_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_supplied_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
</UL>

<P><STRONG><a name="[244]"></a>enqueue_accessory_override</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, override.o(.text.enqueue_accessory_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enqueue_accessory_override
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[243]"></a>enqueue_feed_override</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, override.o(.text.enqueue_feed_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enqueue_feed_override
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[1e0]"></a>etharp_input</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, etharp.o(.text.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = etharp_input &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[df]"></a>etharp_output</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, etharp.o(.text.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_ethernetif.o(.text.ethernetif_init)
</UL>
<P><STRONG><a name="[1e5]"></a>etharp_query</STRONG> (Thumb, 814 bytes, Stack size 56 bytes, etharp.o(.text.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1e7]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, etharp.o(.text.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[f6]"></a>etharp_tmr</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, etharp.o(.text.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[e8]"></a>ethernet_input</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, ethernet.o(.text.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcpecho_test.o(.text.tcpecho_main)
</UL>
<P><STRONG><a name="[1e6]"></a>ethernet_output</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ethernet.o(.text.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ethernet_output &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[e9]"></a>ethernetif0_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, enet_ethernetif_kinetis.o(.text.ethernetif0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ethernetif0_init &rArr; ethernetif_init &rArr; ethernetif_enet_init &rArr; ENET_Init &rArr; ENET_Up &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_get_enet_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcpecho_test.o(.text.tcpecho_main)
</UL>
<P><STRONG><a name="[1f2]"></a>ethernetif_enet_init</STRONG> (Thumb, 294 bytes, Stack size 128 bytes, enet_ethernetif_kinetis.o(.text.ethernetif_enet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ethernetif_enet_init &rArr; ENET_Init &rArr; ENET_Up &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetDefaultConfig
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ActiveRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1f5]"></a>ethernetif_enet_ptr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, enet_ethernetif_kinetis.o(.text.ethernetif_enet_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ethernetif_enet_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1f0]"></a>ethernetif_get_enet_base</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, enet_ethernetif.o(.text.ethernetif_get_enet_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethernetif_get_enet_base
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif0_init
</UL>

<P><STRONG><a name="[1f1]"></a>ethernetif_init</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, enet_ethernetif.o(.text.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ethernetif_init &rArr; ethernetif_enet_init &rArr; ENET_Init &rArr; ENET_Up &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_ptr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif0_init
</UL>

<P><STRONG><a name="[e0]"></a>ethernetif_linkoutput</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, enet_ethernetif_kinetis.o(.text.ethernetif_linkoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ethernetif_linkoutput &rArr; enet_send_frame &rArr; ENET_SendFrame &rArr; ENET_ActiveSendRing &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_send_frame
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_get_tx_buffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_ethernetif.o(.text.ethernetif_init)
</UL>
<P><STRONG><a name="[1f3]"></a>ethernetif_phy_init</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, enet_ethernetif.o(.text.ethernetif_phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ethernetif_phy_init &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_ptr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetLinkStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetLinkSpeedDuplex
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetAutoNegotiationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_init
</UL>

<P><STRONG><a name="[1fb]"></a>icmp_dest_unreach</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icmp.o(.text.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[1fd]"></a>icmp_input</STRONG> (Thumb, 778 bytes, Stack size 72 bytes, icmp.o(.text.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[204]"></a>icmp_time_exceeded</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icmp.o(.text.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[200]"></a>inet_chksum</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, inet_chksum.o(.text.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[1fe]"></a>inet_chksum_pbuf</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inet_chksum.o(.text.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[206]"></a>inet_chksum_pseudo</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, inet_chksum.o(.text.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[1e3]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ip4_addr.o(.text.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[208]"></a>ip4_frag</STRONG> (Thumb, 748 bytes, Stack size 88 bytes, ip4_frag.o(.text.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[1ee]"></a>ip4_input</STRONG> (Thumb, 888 bytes, Stack size 48 bytes, ip4.o(.text.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[201]"></a>ip4_output_if</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ip4.o(.text.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment_netif
</UL>

<P><STRONG><a name="[213]"></a>ip4_output_if_src</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ip4.o(.text.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[20e]"></a>ip4_reass</STRONG> (Thumb, 888 bytes, Stack size 64 bytes, ip4_frag.o(.text.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ip4_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[203]"></a>ip4_route</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, ip4.o(.text.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ip4_route &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[219]"></a>ip_chksum_pseudo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inet_chksum.o(.text.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment_netif
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f5]"></a>ip_reass_tmr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ip4_frag.o(.text.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[1a4]"></a>limit_signals_merge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, limits.o(.text.limit_signals_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = limit_signals_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>lwip_htonl</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, def.o(.text.lwip_htonl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_common
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[1eb]"></a>lwip_htons</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, def.o(.text.lwip_htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[21f]"></a>lwip_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, init.o(.text.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[205]"></a>lwip_standard_chksum</STRONG> (Thumb, 168 bytes, Stack size 28 bytes, inet_chksum.o(.text.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = main &rArr; tcpecho_main &rArr; netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[227]"></a>mc_reset</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, motion_control.o(.text.mc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[22a]"></a>mem_free</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, mem.o(.text.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_link_valid
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_free
</UL>

<P><STRONG><a name="[220]"></a>mem_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mem.o(.text.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_init &rArr; ptr_to_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1d8]"></a>mem_malloc</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, mem.o(.text.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mem_malloc &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[22f]"></a>mem_trim</STRONG> (Thumb, 666 bytes, Stack size 56 bytes, mem.o(.text.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mem_trim &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[21b]"></a>memp_free</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, memp.o(.text.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
</UL>

<P><STRONG><a name="[221]"></a>memp_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, memp.o(.text.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = memp_init &rArr; memp_init_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[230]"></a>memp_init_pool</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, memp.o(.text.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[21a]"></a>memp_malloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, memp.o(.text.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[231]"></a>netif_add</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, netif.o(.text.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[238]"></a>netif_get_by_index</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, netif.o(.text.netif_get_by_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_get_by_index &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
</UL>

<P><STRONG><a name="[222]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1b2]"></a>netif_set_addr</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, netif.o(.text.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[23b]"></a>netif_set_default</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, netif.o(.text.netif_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netif_set_default &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[23c]"></a>netif_set_up</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, netif.o(.text.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[1ef]"></a>pbuf_add_header</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[1b8]"></a>pbuf_alloc</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, pbuf.o(.text.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
</UL>

<P><STRONG><a name="[23e]"></a>pbuf_alloc_reference</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, pbuf.o(.text.pbuf_alloc_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pbuf_alloc_reference &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[20a]"></a>pbuf_alloced_custom</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_alloced_custom &rArr; pbuf_init_alloced_pbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[20c]"></a>pbuf_cat</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, pbuf.o(.text.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_cat &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[240]"></a>pbuf_chain</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[214]"></a>pbuf_clen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_clen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[1e9]"></a>pbuf_clone</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, pbuf.o(.text.pbuf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1ff]"></a>pbuf_copy</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pbuf.o(.text.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pbuf_copy &rArr; pbuf_copy_partial_pbuf &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
</UL>

<P><STRONG><a name="[1d1]"></a>pbuf_copy_partial</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_copy_partial &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
</UL>

<P><STRONG><a name="[202]"></a>pbuf_copy_partial_pbuf</STRONG> (Thumb, 670 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_copy_partial_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_copy_partial_pbuf &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[1c3]"></a>pbuf_free</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment_netif
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_recv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_free
</UL>

<P><STRONG><a name="[212]"></a>pbuf_header_force</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; pbuf_remove_header &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[1cf]"></a>pbuf_realloc</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, pbuf.o(.text.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[1ea]"></a>pbuf_ref</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pbuf_ref &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_send
</UL>

<P><STRONG><a name="[1ed]"></a>pbuf_remove_header</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, pbuf.o(.text.pbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pbuf_remove_header &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[100]"></a>protocol_enqueue_realtime_command</STRONG> (Thumb, 1504 bytes, Stack size 48 bytes, protocol.o(.text.protocol_enqueue_realtime_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = protocol_enqueue_realtime_command &rArr; stream_mpg_enable &rArr;  protocol_enqueue_realtime_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_feed_override
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_accessory_override
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data.enqueue_realtime_command)
</UL>
<P><STRONG><a name="[20f]"></a>raw_input</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, raw.o(.text.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = raw_input &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[235]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, raw.o(.text.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[193]"></a>ring_fifo_write</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, ring_fifo.o(.text.ring_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ring_fifo_write &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>st_deenergize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stepper.o(.text.st_deenergize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_deenergize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.text.st_go_idle)
</UL>
<P><STRONG><a name="[229]"></a>st_go_idle</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stepper.o(.text.st_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[228]"></a>state_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, state_machine.o(.text.state_get))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[242]"></a>stream_mpg_enable</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, stream.o(.text.stream_mpg_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = stream_mpg_enable &rArr;  protocol_enqueue_realtime_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[1da]"></a>sys_arch_protect</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sys_arch_protect &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_alloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[1db]"></a>sys_arch_unprotect</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_arch_unprotect &rArr; EnableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_alloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[1b9]"></a>sys_assert</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_common
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment_netif
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial_pbuf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[1d5]"></a>sys_check_core_locking</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_check_core_locking))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[21d]"></a>sys_now</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch.o(.text.sys_now))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
</UL>

<P><STRONG><a name="[248]"></a>sys_timeout</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, timeouts.o(.text.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[225]"></a>sys_timeouts_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timeouts.o(.text.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[249]"></a>tcp_abandon</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, tcp.o(.text.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[24f]"></a>tcp_abort</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tcp.o(.text.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_poll
</UL>

<P><STRONG><a name="[250]"></a>tcp_accept</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tcp.o(.text.tcp_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_accept &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_init
</UL>

<P><STRONG><a name="[251]"></a>tcp_alloc</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tcp.o(.text.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>

<P><STRONG><a name="[256]"></a>tcp_arg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(.text.tcp_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_arg &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[24d]"></a>tcp_backlog_accepted</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp.o(.text.tcp_backlog_accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_backlog_accepted &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[257]"></a>tcp_bind</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, tcp.o(.text.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_init
</UL>

<P><STRONG><a name="[25a]"></a>tcp_close</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tcp.o(.text.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_recv
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
</UL>

<P><STRONG><a name="[265]"></a>tcp_eff_send_mss_netif</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tcp.o(.text.tcp_eff_send_mss_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_eff_send_mss_netif &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[266]"></a>tcp_enqueue_flags</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[267]"></a>tcp_err</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp.o(.text.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_err &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[268]"></a>tcp_fasttmr</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, tcp.o(.text.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[24b]"></a>tcp_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[224]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[211]"></a>tcp_input</STRONG> (Thumb, 2378 bytes, Stack size 56 bytes, tcp_in.o(.text.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_netif
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[271]"></a>tcp_keepalive</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcp_keepalive &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[278]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(.text.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_init
</UL>

<P><STRONG><a name="[279]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, tcp.o(.text.tcp_listen_with_backlog_and_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
</UL>

<P><STRONG><a name="[233]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tcp.o(.text.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[27b]"></a>tcp_new_ip_type</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp.o(.text.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_init
</UL>

<P><STRONG><a name="[276]"></a>tcp_next_iss</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp.o(.text.tcp_next_iss))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_next_iss &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[262]"></a>tcp_output</STRONG> (Thumb, 1104 bytes, Stack size 96 bytes, tcp_out.o(.text.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[25c]"></a>tcp_pcb_purge</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tcp.o(.text.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[24a]"></a>tcp_pcb_remove</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, tcp.o(.text.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[283]"></a>tcp_poll</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp.o(.text.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_poll &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[269]"></a>tcp_process_refused_data</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, tcp.o(.text.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[289]"></a>tcp_recv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp.o(.text.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_recv &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[e5]"></a>tcp_recv_null</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tcp.o(.text.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text.tcp_alloc)
</UL>
<P><STRONG><a name="[28a]"></a>tcp_recved</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tcp.o(.text.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_recv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_send
</UL>

<P><STRONG><a name="[285]"></a>tcp_rexmit</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, tcp_out.o(.text.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_rexmit &rArr; tcp_output_segment_busy &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[287]"></a>tcp_rexmit_fast</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tcp_out.o(.text.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; tcp_output_segment_busy &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[284]"></a>tcp_rexmit_rto</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp_out.o(.text.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[28c]"></a>tcp_rexmit_rto_commit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(.text.tcp_rexmit_rto_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[28b]"></a>tcp_rexmit_rto_prepare</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, tcp_out.o(.text.tcp_rexmit_rto_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_rexmit_rto_prepare &rArr; tcp_output_segment_busy &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[24e]"></a>tcp_rst</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, tcp_out.o(.text.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tcp_rst &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_common
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[270]"></a>tcp_rst_netif</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, tcp_out.o(.text.tcp_rst_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_rst_netif &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_common
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[264]"></a>tcp_seg_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(.text.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[24c]"></a>tcp_segs_free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(.text.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[26d]"></a>tcp_send_empty_ack</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[261]"></a>tcp_send_fin</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tcp_out.o(.text.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[28e]"></a>tcp_sent</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp.o(.text.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_sent &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_sent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[28f]"></a>tcp_setprio</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tcp.o(.text.tcp_setprio))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_setprio &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_accept
</UL>

<P><STRONG><a name="[290]"></a>tcp_slowtmr</STRONG> (Thumb, 1894 bytes, Stack size 80 bytes, tcp.o(.text.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[292]"></a>tcp_split_unsent_seg</STRONG> (Thumb, 706 bytes, Stack size 64 bytes, tcp_out.o(.text.tcp_split_unsent_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_split_unsent_seg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[259]"></a>tcp_timer_needed</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, timeouts.o(.text.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>

<P><STRONG><a name="[f4]"></a>tcp_tmr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp.o(.text.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[25d]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp_in.o(.text.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[288]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, tcp.o(.text.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[293]"></a>tcp_write</STRONG> (Thumb, 2162 bytes, Stack size 152 bytes, tcp_out.o(.text.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_recv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_send
</UL>

<P><STRONG><a name="[291]"></a>tcp_zero_window_probe</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, tcp_out.o(.text.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[226]"></a>tcpecho_main</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, lwip_tcpecho_test.o(.text.tcpecho_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = tcpecho_main &rArr; netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitModuleClock
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_EnableMode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[297]"></a>tcpecho_raw_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcpecho_raw.o(.text.tcpecho_raw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = tcpecho_raw_init &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[19e]"></a>time_isr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_arch.o(.text.time_isr))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1cb]"></a>udp_bind</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, udp.o(.text.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = udp_bind &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>

<P><STRONG><a name="[1cc]"></a>udp_connect</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, udp.o(.text.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[223]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[210]"></a>udp_input</STRONG> (Thumb, 740 bytes, Stack size 48 bytes, udp.o(.text.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[234]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, udp.o(.text.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[1ca]"></a>udp_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, udp.o(.text.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[1cd]"></a>udp_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, udp.o(.text.udp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = udp_recv &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[1be]"></a>udp_remove</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, udp.o(.text.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>

<P><STRONG><a name="[1d3]"></a>udp_sendto_if</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, udp.o(.text.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[1c2]"></a>udp_sendto_if_src</STRONG> (Thumb, 662 bytes, Stack size 64 bytes, udp.o(.text.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_core_locking
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[2af]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2b0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[119]"></a>ARM_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[11b]"></a>ARM_MPU_Enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[11f]"></a>CLOCK_GetDiv</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[11d]"></a>CLOCK_GetMux</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetMux
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[120]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[12b]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_DisableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock_config.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10e]"></a>CLOCK_SetDiv</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10d]"></a>CLOCK_SetMux</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[112]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, clock_config.o(.text.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[108]"></a>CLOCK_SetRtcXtalFreq</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_SetRtcXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_SetRtcXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[109]"></a>CLOCK_SetXtalFreq</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_SetXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_SetXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[117]"></a>IOMUXC_EnableMode</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_EnableMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_EnableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[116]"></a>IOMUXC_MQSConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_MQSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_MQSConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[115]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetSaiMClkClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12c]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, clock_config.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[12d]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pin_mux.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[126]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitEnetPins
</UL>

<P><STRONG><a name="[128]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pin_mux.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitEnetPins
</UL>

<P><STRONG><a name="[127]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin_mux.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitEnetPins
</UL>

<P><STRONG><a name="[12e]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pin_mux.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[18d]"></a>HAL_UartGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_adapter_lpuart.o(.text.HAL_UartGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>

<P><STRONG><a name="[18a]"></a>HAL_UartInitCommon</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, fsl_adapter_lpuart.o(.text.HAL_UartInitCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_UartInitCommon &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[12f]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_enet_mdio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[137]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_enet_mdio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Init
</UL>

<P><STRONG><a name="[15e]"></a>ENET_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet_mdio.o(.text.ENET_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WriteExt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_ReadExt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Read
</UL>

<P><STRONG><a name="[164]"></a>ENET_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, fsl_enet_mdio.o(.text.ENET_GetInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENET_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WaitTransferOver
</UL>

<P><STRONG><a name="[ef]"></a>ENET_MDIO_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_enet_mdio.o(.text.ENET_MDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ENET_MDIO_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetSMI
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet_mdio.o(.rodata.enet_ops)
</UL>
<P><STRONG><a name="[f1]"></a>ENET_MDIO_Read</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fsl_enet_mdio.o(.text.ENET_MDIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ENET_MDIO_Read &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartSMIRead
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadSMIData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WaitTransferOver
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ClearInterruptStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet_mdio.o(.rodata.enet_ops)
</UL>
<P><STRONG><a name="[f3]"></a>ENET_MDIO_ReadExt</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, fsl_enet_mdio.o(.text.ENET_MDIO_ReadExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ENET_MDIO_ReadExt &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartExtC45SMIWriteReg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartExtC45SMIReadData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadSMIData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WaitTransferOver
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ClearInterruptStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet_mdio.o(.rodata.enet_ops)
</UL>
<P><STRONG><a name="[160]"></a>ENET_MDIO_WaitTransferOver</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_enet_mdio.o(.text.ENET_MDIO_WaitTransferOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_MDIO_WaitTransferOver &rArr; ENET_GetInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WriteExt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_ReadExt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Read
</UL>

<P><STRONG><a name="[f0]"></a>ENET_MDIO_Write</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, fsl_enet_mdio.o(.text.ENET_MDIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_MDIO_Write &rArr; ENET_StartSMIWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartSMIWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WaitTransferOver
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ClearInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet_mdio.o(.rodata.enet_ops)
</UL>
<P><STRONG><a name="[f2]"></a>ENET_MDIO_WriteExt</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fsl_enet_mdio.o(.text.ENET_MDIO_WriteExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENET_MDIO_WriteExt &rArr; ENET_StartExtC45SMIWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartExtC45SMIWriteReg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartExtC45SMIWriteData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_WaitTransferOver
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ClearInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet_mdio.o(.rodata.enet_ops)
</UL>
<P><STRONG><a name="[161]"></a>ENET_ReadSMIData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fsl_enet_mdio.o(.text.ENET_ReadSMIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENET_ReadSMIData
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_ReadExt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MDIO_Read
</UL>

<P><STRONG><a name="[130]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_enet_mdio.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[198]"></a>MDIO_Init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fsl_phylan8720a.o(.text.MDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_Init
</UL>

<P><STRONG><a name="[197]"></a>MDIO_Read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.MDIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MDIO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_SetLinkSpeedDuplex
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_GetLinkStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_GetLinkSpeedDuplex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_GetAutoNegotiationStatus
</UL>

<P><STRONG><a name="[199]"></a>MDIO_Write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_phylan8720a.o(.text.MDIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MDIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_Write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_SetLinkSpeedDuplex
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_LAN8720A_Init
</UL>

<P><STRONG><a name="[141]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[13c]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[146]"></a>CLOCK_GetPllBypassRefClk</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPllBypassRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLOCK_GetPllBypassRefClk &rArr; CLOCK_GetOscFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[144]"></a>CLOCK_GetPllUsb1SWFreq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPllUsb1SWFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CLOCK_GetPllUsb1SWFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[142]"></a>CLOCK_GetRtcFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetRtcFreq))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[148]"></a>CLOCK_IsPllBypassed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_IsPllBypassed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_IsPllBypassed
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[147]"></a>CLOCK_IsPllEnabled</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_IsPllEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_IsPllEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[131]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[138]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[185]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[132]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[133]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[139]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[196]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LPUART_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[134]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_lpuart.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[14a]"></a>L1CACHE_CleanDCacheByRange</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fsl_cache.o(.text.L1CACHE_CleanDCacheByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L1CACHE_CleanDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
</UL>

<P><STRONG><a name="[14c]"></a>L1CACHE_InvalidateDCacheByRange</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fsl_cache.o(.text.L1CACHE_InvalidateDCacheByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
</UL>

<P><STRONG><a name="[135]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_enet.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[13a]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_enet.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[168]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fsl_enet.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReclaimTxDescriptor
</UL>

<P><STRONG><a name="[154]"></a>ENET_ActiveSendRing</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_ActiveSendRing))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ENET_ActiveSendRing &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
</UL>

<P><STRONG><a name="[177]"></a>ENET_EnableInterrupts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
</UL>

<P><STRONG><a name="[157]"></a>ENET_EnableSleepMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_EnableSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_EnableSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ErrorIRQHandler
</UL>

<P><STRONG><a name="[176]"></a>ENET_GetSMI</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, fsl_enet.o(.text.ENET_GetSMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENET_GetSMI
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
</UL>

<P><STRONG><a name="[159]"></a>ENET_IncreaseIndex</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_IncreaseIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ENET_IncreaseIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferFreeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferAllocAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReclaimTxDescriptor
</UL>

<P><STRONG><a name="[15b]"></a>ENET_Reset</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_enet.o(.text.ENET_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENET_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[16a]"></a>ENET_RxBufferAllocAll</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_RxBufferAllocAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ENET_RxBufferAllocAll &rArr; ENET_RxBufferFreeAll &rArr; ENET_IncreaseIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferFreeAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IncreaseIndex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
</UL>

<P><STRONG><a name="[16b]"></a>ENET_RxBufferFreeAll</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_RxBufferFreeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ENET_RxBufferFreeAll &rArr; ENET_IncreaseIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IncreaseIndex
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_RxBufferAllocAll
</UL>

<P><STRONG><a name="[171]"></a>ENET_SetHandler</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_SetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ENET_SetHandler &rArr; ENET_SetTxISRHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxISRHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxISRHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetErrISRHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
</UL>

<P><STRONG><a name="[174]"></a>ENET_SetMacController</STRONG> (Thumb, 626 bytes, Stack size 56 bytes, fsl_enet.o(.text.ENET_SetMacController))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetSMI
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_EnableInterrupts
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetSMI
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
</UL>

<P><STRONG><a name="[178]"></a>ENET_SetRxBufferDescriptors</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_SetRxBufferDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ENET_SetRxBufferDescriptors &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
</UL>

<P><STRONG><a name="[179]"></a>ENET_SetTxBufferDescriptors</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, fsl_enet.o(.text.ENET_SetTxBufferDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ENET_SetTxBufferDescriptors &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Up
</UL>

<P><STRONG><a name="[16d]"></a>ENET_TxDirtyRingAvailable</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fsl_enet.o(.text.ENET_TxDirtyRingAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENET_TxDirtyRingAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
</UL>

<P><STRONG><a name="[169]"></a>EnableGlobalIRQ</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_enet.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReclaimTxDescriptor
</UL>

<P><STRONG><a name="[170]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_enet.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxISRHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxISRHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetErrISRHandler
</UL>

<P><STRONG><a name="[136]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_enet.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[17a]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, fsl_enet.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[190]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[189]"></a>GPT_ClearStatusFlags</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_gpt.o(.text.GPT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT2_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_key_it.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, fsl_debug_console.o(.text.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[14f]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 942 bytes, Stack size 128 bytes, fsl_debug_console.o(.text.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[151]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fsl_debug_console.o(.text.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[17c]"></a>GPIO_GetPinsInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, driver.o(.text.GPIO_GetPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_GetPinsInterruptFlags &rArr; GPIO_PortGetInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>GPIO_PinRead</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemGetState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitsGetState
</UL>

<P><STRONG><a name="[17e]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, driver.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, driver.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>

<P><STRONG><a name="[19b]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, driver.o(.text.PIT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(.text.PIT_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>QTMR_StartTimer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, driver.o(.text.QTMR_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>limitsGetState</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, driver.o(.text.limitsGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = limitsGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>systemGetState</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, driver.o(.text.systemGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = systemGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>LPUART_ReadByte</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, serial.o(.text.LPUART_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPUART_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>USB_DeviceEhciCancelControlPipe</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, usb_device_ehci.o(.text.USB_DeviceEhciCancelControlPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
</UL>

<P><STRONG><a name="[1aa]"></a>USB_DeviceEhciFillSetupBuffer</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usb_device_ehci.o(.text.USB_DeviceEhciFillSetupBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceEhciFillSetupBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
</UL>

<P><STRONG><a name="[1a7]"></a>USB_DeviceEhciInterruptPortChange</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptPortChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_DeviceEhciInterruptPortChange &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[1a8]"></a>USB_DeviceEhciInterruptReset</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceEhciInterruptReset &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[1ac]"></a>USB_DeviceEhciInterruptSof</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptSof))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DeviceEhciInterruptSof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[1a9]"></a>USB_DeviceEhciInterruptTokenDone</STRONG> (Thumb, 1050 bytes, Stack size 56 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptTokenDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciFillSetupBuffer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[1af]"></a>USB_DeviceControl</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>

<P><STRONG><a name="[1ad]"></a>USB_DeviceNotification</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>

<P><STRONG><a name="[1ae]"></a>USB_DeviceResetNotification</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceResetNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>

<P><STRONG><a name="[1f8]"></a>PHY_GetAutoNegotiationStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, enet_ethernetif.o(.text.PHY_GetAutoNegotiationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PHY_GetAutoNegotiationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
</UL>

<P><STRONG><a name="[1fa]"></a>PHY_GetLinkSpeedDuplex</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, enet_ethernetif.o(.text.PHY_GetLinkSpeedDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_GetLinkSpeedDuplex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
</UL>

<P><STRONG><a name="[1f9]"></a>PHY_GetLinkStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, enet_ethernetif.o(.text.PHY_GetLinkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PHY_GetLinkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
</UL>

<P><STRONG><a name="[1f7]"></a>PHY_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, enet_ethernetif.o(.text.PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PHY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_phy_init
</UL>

<P><STRONG><a name="[1f4]"></a>ENET_ActiveRead</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, enet_ethernetif_kinetis.o(.text.ENET_ActiveRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENET_ActiveRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enet_init
</UL>

<P><STRONG><a name="[1f6]"></a>enet_get_tx_buffer</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, enet_ethernetif_kinetis.o(.text.enet_get_tx_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enet_get_tx_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[1dd]"></a>enet_send_frame</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, enet_ethernetif_kinetis.o(.text.enet_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = enet_send_frame &rArr; ENET_SendFrame &rArr; ENET_ActiveSendRing &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[dc]"></a>ethernetif_rx_alloc</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, enet_ethernetif_kinetis.o(.text.ethernetif_rx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ethernetif_rx_alloc &rArr; sys_arch_protect &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_ethernetif_kinetis.o(.text.ethernetif_enet_init)
</UL>
<P><STRONG><a name="[dd]"></a>ethernetif_rx_free</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, enet_ethernetif_kinetis.o(.text.ethernetif_rx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ethernetif_rx_free &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_ethernetif_kinetis.o(.text.ethernetif_enet_init)
</UL>
<P><STRONG><a name="[de]"></a>ethernetif_rx_release</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, enet_ethernetif_kinetis.o(.text.ethernetif_rx_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ethernetif_rx_release &rArr; ethernetif_rx_free &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_rx_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_ethernetif_kinetis.o(.text.ethernetif_enet_init)
</UL>
<P><STRONG><a name="[246]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sys_arch.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[247]"></a>EnableGlobalIRQ</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[207]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, inet_chksum.o(.text.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[22b]"></a>mem_link_valid</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mem.o(.text.mem_link_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_link_valid &rArr; ptr_to_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[22e]"></a>mem_to_ptr</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mem.o(.text.mem_to_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mem_to_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_link_valid
</UL>

<P><STRONG><a name="[22c]"></a>plug_holes</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[22d]"></a>ptr_to_mem</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, mem.o(.text.ptr_to_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ptr_to_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_link_valid
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[1d9]"></a>do_memp_free_pool</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, memp.o(.text.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[1dc]"></a>do_memp_malloc_pool</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, memp.o(.text.do_memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[232]"></a>netif_do_ip_addr_changed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(.text.netif_do_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[23a]"></a>netif_do_set_gw</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, netif.o(.text.netif_do_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[236]"></a>netif_do_set_ipaddr</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, netif.o(.text.netif_do_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[239]"></a>netif_do_set_netmask</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, netif.o(.text.netif_do_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netif_do_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[237]"></a>netif_issue_reports</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, netif.o(.text.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[e3]"></a>netif_null_output_ip4</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, netif.o(.text.netif_null_output_ip4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = netif_null_output_ip4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(.text.netif_add)
</UL>
<P><STRONG><a name="[23d]"></a>pbuf_add_header_impl</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, pbuf.o(.text.pbuf_add_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pbuf_add_header_impl &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>

<P><STRONG><a name="[241]"></a>pbuf_header_impl</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pbuf.o(.text.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pbuf_header_impl &rArr; pbuf_remove_header &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[23f]"></a>pbuf_init_alloced_pbuf</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pbuf.o(.text.pbuf_init_alloced_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[245]"></a>raw_input_local_match</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, raw.o(.text.raw_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = raw_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[e6]"></a>tcp_accept_null</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tcp.o(.text.tcp_accept_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = tcp_accept_null &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text.tcp_listen_with_backlog_and_err)
</UL>
<P><STRONG><a name="[25b]"></a>tcp_close_shutdown</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, tcp.o(.text.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[260]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tcp.o(.text.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[25f]"></a>tcp_free_listen</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text.tcp_free_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_free_listen &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[252]"></a>tcp_handle_closepend</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp.o(.text.tcp_handle_closepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcp_handle_closepend &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[255]"></a>tcp_kill_prio</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tcp.o(.text.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[254]"></a>tcp_kill_state</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tcp.o(.text.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[253]"></a>tcp_kill_timewait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp.o(.text.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[25e]"></a>tcp_listen_closed</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tcp.o(.text.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_listen_closed &rArr; tcp_remove_listener &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[27a]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcp.o(.text.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[258]"></a>tcp_new_port</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, tcp.o(.text.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[275]"></a>tcp_remove_listener</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(.text.tcp_remove_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_remove_listener &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[26a]"></a>tcp_free_acked_segments</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, tcp_in.o(.text.tcp_free_acked_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_free_acked_segments &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[281]"></a>tcp_get_next_optbyte</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, tcp_in.o(.text.tcp_get_next_optbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_get_next_optbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[26f]"></a>tcp_input_delayed_close</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp_in.o(.text.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[26c]"></a>tcp_listen_input</STRONG> (Thumb, 590 bytes, Stack size 48 bytes, tcp_in.o(.text.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_netif
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[277]"></a>tcp_parseopt</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, tcp_in.o(.text.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_parseopt &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_next_optbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[26e]"></a>tcp_process</STRONG> (Thumb, 2550 bytes, Stack size 88 bytes, tcp_in.o(.text.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[286]"></a>tcp_receive</STRONG> (Thumb, 2472 bytes, Stack size 64 bytes, tcp_in.o(.text.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[26b]"></a>tcp_timewait_input</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tcp_in.o(.text.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[263]"></a>tcp_create_segment</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[272]"></a>tcp_output_alloc_header</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, tcp_out.o(.text.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[27e]"></a>tcp_output_alloc_header_common</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, tcp_out.o(.text.tcp_output_alloc_header_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_common
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>

<P><STRONG><a name="[274]"></a>tcp_output_control_segment</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_output_control_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[27f]"></a>tcp_output_control_segment_netif</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, tcp_out.o(.text.tcp_output_control_segment_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_netif
</UL>

<P><STRONG><a name="[273]"></a>tcp_output_fill_options</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tcp_out.o(.text.tcp_output_fill_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_output_fill_options &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_common
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[27d]"></a>tcp_output_segment</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, tcp_out.o(.text.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[280]"></a>tcp_output_segment_busy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp_out.o(.text.tcp_output_segment_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_output_segment_busy &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
</UL>

<P><STRONG><a name="[282]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[27c]"></a>tcp_route</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tcp_out.o(.text.tcp_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_route &rArr; ip4_route &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
</UL>

<P><STRONG><a name="[28d]"></a>tcp_rst_common</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, tcp_out.o(.text.tcp_rst_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_rst_common &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_netif
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[294]"></a>tcp_write_checks</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, tcp_out.o(.text.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_write_checks &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[e2]"></a>lwip_cyclic_timer</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, timeouts.o(.text.lwip_cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwip_cyclic_timer &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(.text.sys_timeouts_init)
<LI> timeouts.o(.text.lwip_cyclic_timer)
</UL>
<P><STRONG><a name="[21e]"></a>sys_timeout_abs</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, timeouts.o(.text.sys_timeout_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
</UL>

<P><STRONG><a name="[e7]"></a>tcpip_tcp_timer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timeouts.o(.text.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(.text.tcp_timer_needed)
<LI> timeouts.o(.text.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[29c]"></a>udp_input_local_match</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, udp.o(.text.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = udp_input_local_match &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[29b]"></a>udp_new_port</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, udp.o(.text.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[1b0]"></a>dhcp_bind</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, dhcp.o(.text.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1b7]"></a>dhcp_create_msg</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[1bd]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_dec_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
</UL>

<P><STRONG><a name="[1bf]"></a>dhcp_discover</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[1c5]"></a>dhcp_handle_ack</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dhcp_handle_ack &rArr; lwip_htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1c6]"></a>dhcp_handle_nak</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1c7]"></a>dhcp_handle_offer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1c9]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_connect &rArr; udp_bind &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[1bb]"></a>dhcp_option</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_option &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1bc]"></a>dhcp_option_byte</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_option_byte &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1ce]"></a>dhcp_option_long</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_option_long &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</UL>

<P><STRONG><a name="[1c0]"></a>dhcp_option_short</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_option_short &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[1c1]"></a>dhcp_option_trailer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_option_trailer &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[1d0]"></a>dhcp_parse_reply</STRONG> (Thumb, 1430 bytes, Stack size 96 bytes, dhcp.o(.text.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1d2]"></a>dhcp_rebind</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[1d4]"></a>dhcp_reboot</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, dhcp.o(.text.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[db]"></a>dhcp_recv</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, dhcp.o(.text.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[1c8]"></a>dhcp_select</STRONG> (Thumb, 578 bytes, Stack size 72 bytes, dhcp.o(.text.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[1b1]"></a>dhcp_set_state</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dhcp.o(.text.dhcp_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[1b6]"></a>dhcp_t1_timeout</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1b5]"></a>dhcp_t2_timeout</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1c4]"></a>dhcp_timeout</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = dhcp_timeout &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[1de]"></a>etharp_find_entry</STRONG> (Thumb, 942 bytes, Stack size 48 bytes, etharp.o(.text.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[1df]"></a>etharp_free_entry</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, etharp.o(.text.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[1e4]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, etharp.o(.text.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1e2]"></a>etharp_raw</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, etharp.o(.text.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[1e8]"></a>etharp_request_dst</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, etharp.o(.text.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[1e1]"></a>etharp_update_arp_entry</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, etharp.o(.text.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[1fc]"></a>icmp_send_response</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, icmp.o(.text.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial_pbuf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[20d]"></a>ip4_input_accept</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ip4.o(.text.ip4_input_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip4_input_accept &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[209]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip4_frag.o(.text.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[20b]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ip4_frag.o(.text.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[217]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 730 bytes, Stack size 56 bytes, ip4_frag.o(.text.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[218]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ip4_frag.o(.text.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[216]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ip4_frag.o(.text.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[21c]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, ip4_frag.o(.text.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[215]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, ip4_frag.o(.text.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[e1]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ip4_frag.o(.text.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(.text.ip4_frag)
</UL>
<P><STRONG><a name="[188]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_tcpecho_test.o(.text.GPIO_WritePinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GPIO_WritePinOutput &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[295]"></a>IOMUXC_EnableMode</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lwip_tcpecho_test.o(.text.IOMUXC_EnableMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_EnableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_main
</UL>

<P><STRONG><a name="[ee]"></a>tcpecho_raw_accept</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tcpecho_raw.o(.text.tcpecho_raw_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcpecho_raw_accept &rArr; tcp_poll &rArr; sys_check_core_locking &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpecho_raw.o(.text.tcpecho_raw_init)
</UL>
<P><STRONG><a name="[298]"></a>tcpecho_raw_close</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tcpecho_raw.o(.text.tcpecho_raw_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = tcpecho_raw_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_sent
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_poll
</UL>

<P><STRONG><a name="[eb]"></a>tcpecho_raw_error</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, tcpecho_raw.o(.text.tcpecho_raw_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tcpecho_raw_error &rArr; tcpecho_raw_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpecho_raw.o(.text.tcpecho_raw_accept)
</UL>
<P><STRONG><a name="[299]"></a>tcpecho_raw_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcpecho_raw.o(.text.tcpecho_raw_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcpecho_raw_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_error
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
</UL>

<P><STRONG><a name="[ec]"></a>tcpecho_raw_poll</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcpecho_raw.o(.text.tcpecho_raw_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = tcpecho_raw_poll &rArr; tcpecho_raw_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpecho_raw.o(.text.tcpecho_raw_accept)
</UL>
<P><STRONG><a name="[29a]"></a>tcpecho_raw_send</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tcpecho_raw.o(.text.tcpecho_raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = tcpecho_raw_send &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_sent
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_poll
</UL>

<P><STRONG><a name="[ed]"></a>tcpecho_raw_sent</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcpecho_raw.o(.text.tcpecho_raw_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = tcpecho_raw_sent &rArr; tcpecho_raw_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpecho_raw_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpecho_raw.o(.text.tcpecho_raw_sent)
<LI> tcpecho_raw.o(.text.tcpecho_raw_accept)
</UL>
<P><STRONG><a name="[ea]"></a>tcpecho_recv</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tcpecho_raw.o(.text.tcpecho_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = tcpecho_recv &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; tcp_output_control_segment_netif &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; sys_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpecho_raw.o(.text.tcpecho_raw_accept)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
