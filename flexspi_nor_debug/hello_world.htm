<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [flexspi_nor_debug\hello_world.out]</title></head>
<body><HR>
<H1>Static Call Graph for image flexspi_nor_debug\hello_world.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Aug 23 10:49:11 2022
<BR><P>
<H3>Maximum Stack Usage =       1608 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; grbl_enter &rArr; protocol_main_loop &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5]">Reset_Handler</a>
 <LI><a href="#[8a]">ACMP1_IRQHandler</a>
 <LI><a href="#[8b]">ACMP2_IRQHandler</a>
 <LI><a href="#[8c]">ACMP3_IRQHandler</a>
 <LI><a href="#[8d]">ACMP4_IRQHandler</a>
 <LI><a href="#[52]">ADC1_IRQHandler</a>
 <LI><a href="#[53]">ADC2_IRQHandler</a>
 <LI><a href="#[88]">ADC_ETC_ERROR_IRQ_IRQHandler</a>
 <LI><a href="#[85]">ADC_ETC_IRQ0_IRQHandler</a>
 <LI><a href="#[86]">ADC_ETC_IRQ1_IRQHandler</a>
 <LI><a href="#[87]">ADC_ETC_IRQ2_IRQHandler</a>
 <LI><a href="#[46]">BEE_IRQHandler</a>
 <LI><a href="#[9]">BusFault_Handler</a>
 <LI><a href="#[cb]">CAN1_DriverIRQHandler</a>
 <LI><a href="#[cc]">CAN2_DriverIRQHandler</a>
 <LI><a href="#[6e]">CCM_1_IRQHandler</a>
 <LI><a href="#[6f]">CCM_2_IRQHandler</a>
 <LI><a href="#[22]">CORE_IRQHandler</a>
 <LI><a href="#[3a]">CSI_IRQHandler</a>
 <LI><a href="#[40]">CSU_IRQHandler</a>
 <LI><a href="#[20]">CTI0_ERROR_IRQHandler</a>
 <LI><a href="#[21]">CTI1_ERROR_IRQHandler</a>
 <LI><a href="#[54]">DCDC_IRQHandler</a>
 <LI><a href="#[41]">DCP_IRQHandler</a>
 <LI><a href="#[42]">DCP_VMI_IRQHandler</a>
 <LI><a href="#[aa]">DMA0_DMA16_DriverIRQHandler</a>
 <LI><a href="#[b4]">DMA10_DMA26_DriverIRQHandler</a>
 <LI><a href="#[b5]">DMA11_DMA27_DriverIRQHandler</a>
 <LI><a href="#[b6]">DMA12_DMA28_DriverIRQHandler</a>
 <LI><a href="#[b7]">DMA13_DMA29_DriverIRQHandler</a>
 <LI><a href="#[b8]">DMA14_DMA30_DriverIRQHandler</a>
 <LI><a href="#[b9]">DMA15_DMA31_DriverIRQHandler</a>
 <LI><a href="#[ab]">DMA1_DMA17_DriverIRQHandler</a>
 <LI><a href="#[ac]">DMA2_DMA18_DriverIRQHandler</a>
 <LI><a href="#[ad]">DMA3_DMA19_DriverIRQHandler</a>
 <LI><a href="#[ae]">DMA4_DMA20_DriverIRQHandler</a>
 <LI><a href="#[af]">DMA5_DMA21_DriverIRQHandler</a>
 <LI><a href="#[b0]">DMA6_DMA22_DriverIRQHandler</a>
 <LI><a href="#[b1]">DMA7_DMA23_DriverIRQHandler</a>
 <LI><a href="#[b2]">DMA8_DMA24_DriverIRQHandler</a>
 <LI><a href="#[b3]">DMA9_DMA25_DriverIRQHandler</a>
 <LI><a href="#[ba]">DMA_ERROR_DriverIRQHandler</a>
 <LI><a href="#[c]">DebugMon_Handler</a>
 <LI><a href="#[1]">DefaultISR</a>
 <LI><a href="#[90]">ENC1_IRQHandler</a>
 <LI><a href="#[91]">ENC2_IRQHandler</a>
 <LI><a href="#[92]">ENC3_IRQHandler</a>
 <LI><a href="#[93]">ENC4_IRQHandler</a>
 <LI><a href="#[d8]">ENET_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[d7]">ENET_DriverIRQHandler</a>
 <LI><a href="#[6d]">EWM_IRQHandler</a>
 <LI><a href="#[d2]">FLEXIO1_DriverIRQHandler</a>
 <LI><a href="#[d3]">FLEXIO2_DriverIRQHandler</a>
 <LI><a href="#[35]">FLEXRAM_IRQHandler</a>
 <LI><a href="#[d4]">FLEXSPI_DriverIRQHandler</a>
 <LI><a href="#[70]">GPC_IRQHandler</a>
 <LI><a href="#[57]">GPIO1_INT0_IRQHandler</a>
 <LI><a href="#[58]">GPIO1_INT1_IRQHandler</a>
 <LI><a href="#[59]">GPIO1_INT2_IRQHandler</a>
 <LI><a href="#[5a]">GPIO1_INT3_IRQHandler</a>
 <LI><a href="#[5b]">GPIO1_INT4_IRQHandler</a>
 <LI><a href="#[5c]">GPIO1_INT5_IRQHandler</a>
 <LI><a href="#[5d]">GPIO1_INT6_IRQHandler</a>
 <LI><a href="#[5e]">GPIO1_INT7_IRQHandler</a>
 <LI><a href="#[61]">GPIO2_Combined_0_15_IRQHandler</a>
 <LI><a href="#[62]">GPIO2_Combined_16_31_IRQHandler</a>
 <LI><a href="#[64]">GPIO3_Combined_16_31_IRQHandler</a>
 <LI><a href="#[65]">GPIO4_Combined_0_15_IRQHandler</a>
 <LI><a href="#[66]">GPIO4_Combined_16_31_IRQHandler</a>
 <LI><a href="#[68]">GPIO5_Combined_16_31_IRQHandler</a>
 <LI><a href="#[38]">GPR_IRQ_IRQHandler</a>
 <LI><a href="#[73]">GPT1_IRQHandler</a>
 <LI><a href="#[36]">KPP_IRQHandler</a>
 <LI><a href="#[39]">LCDIF_IRQHandler</a>
 <LI><a href="#[c3]">LPI2C1_DriverIRQHandler</a>
 <LI><a href="#[c4]">LPI2C2_DriverIRQHandler</a>
 <LI><a href="#[c5]">LPI2C3_DriverIRQHandler</a>
 <LI><a href="#[c6]">LPI2C4_DriverIRQHandler</a>
 <LI><a href="#[c7]">LPSPI1_DriverIRQHandler</a>
 <LI><a href="#[c8]">LPSPI2_DriverIRQHandler</a>
 <LI><a href="#[c9]">LPSPI3_DriverIRQHandler</a>
 <LI><a href="#[ca]">LPSPI4_DriverIRQHandler</a>
 <LI><a href="#[8]">MemManage_Handler</a>
 <LI><a href="#[4c]">PMU_EVENT_IRQHandler</a>
 <LI><a href="#[75]">PWM1_0_IRQHandler</a>
 <LI><a href="#[76]">PWM1_1_IRQHandler</a>
 <LI><a href="#[77]">PWM1_2_IRQHandler</a>
 <LI><a href="#[78]">PWM1_3_IRQHandler</a>
 <LI><a href="#[79]">PWM1_FAULT_IRQHandler</a>
 <LI><a href="#[98]">PWM2_0_IRQHandler</a>
 <LI><a href="#[99]">PWM2_1_IRQHandler</a>
 <LI><a href="#[9a]">PWM2_2_IRQHandler</a>
 <LI><a href="#[9b]">PWM2_3_IRQHandler</a>
 <LI><a href="#[9c]">PWM2_FAULT_IRQHandler</a>
 <LI><a href="#[9d]">PWM3_0_IRQHandler</a>
 <LI><a href="#[9e]">PWM3_1_IRQHandler</a>
 <LI><a href="#[9f]">PWM3_2_IRQHandler</a>
 <LI><a href="#[a0]">PWM3_3_IRQHandler</a>
 <LI><a href="#[a1]">PWM3_FAULT_IRQHandler</a>
 <LI><a href="#[a2]">PWM4_0_IRQHandler</a>
 <LI><a href="#[a3]">PWM4_1_IRQHandler</a>
 <LI><a href="#[a4]">PWM4_2_IRQHandler</a>
 <LI><a href="#[a5]">PWM4_3_IRQHandler</a>
 <LI><a href="#[a6]">PWM4_FAULT_IRQHandler</a>
 <LI><a href="#[3b]">PXP_IRQHandler</a>
 <LI><a href="#[6c]">RTWDOG_IRQHandler</a>
 <LI><a href="#[72]">Reserved115_IRQHandler</a>
 <LI><a href="#[7a]">Reserved123_IRQHandler</a>
 <LI><a href="#[8e]">Reserved143_IRQHandler</a>
 <LI><a href="#[8f]">Reserved144_IRQHandler</a>
 <LI><a href="#[43]">Reserved68_IRQHandler</a>
 <LI><a href="#[4d]">Reserved78_IRQHandler</a>
 <LI><a href="#[55]">Reserved86_IRQHandler</a>
 <LI><a href="#[56]">Reserved87_IRQHandler</a>
 <LI><a href="#[cd]">SAI1_DriverIRQHandler</a>
 <LI><a href="#[ce]">SAI2_DriverIRQHandler</a>
 <LI><a href="#[cf]">SAI3_RX_DriverIRQHandler</a>
 <LI><a href="#[d0]">SAI3_TX_DriverIRQHandler</a>
 <LI><a href="#[7c]">SEMC_IRQHandler</a>
 <LI><a href="#[45]">SJC_IRQHandler</a>
 <LI><a href="#[3d]">SNVS_HP_WRAPPER_IRQHandler</a>
 <LI><a href="#[3e]">SNVS_HP_WRAPPER_TZ_IRQHandler</a>
 <LI><a href="#[3f]">SNVS_LP_WRAPPER_IRQHandler</a>
 <LI><a href="#[d1]">SPDIF_DriverIRQHandler</a>
 <LI><a href="#[71]">SRC_IRQHandler</a>
 <LI><a href="#[4e]">TEMP_LOW_HIGH_IRQHandler</a>
 <LI><a href="#[4f]">TEMP_PANIC_IRQHandler</a>
 <LI><a href="#[96]">TMR3_IRQHandler</a>
 <LI><a href="#[97]">TMR4_IRQHandler</a>
 <LI><a href="#[44]">TRNG_IRQHandler</a>
 <LI><a href="#[37]">TSC_DIG_IRQHandler</a>
 <LI><a href="#[80]">USB_OTG1_IRQHandler</a>
 <LI><a href="#[7f]">USB_OTG2_IRQHandler</a>
 <LI><a href="#[50]">USB_PHY1_IRQHandler</a>
 <LI><a href="#[51]">USB_PHY2_IRQHandler</a>
 <LI><a href="#[d5]">USDHC1_DriverIRQHandler</a>
 <LI><a href="#[d6]">USDHC2_DriverIRQHandler</a>
 <LI><a href="#[a]">UsageFault_Handler</a>
 <LI><a href="#[6b]">WDOG1_IRQHandler</a>
 <LI><a href="#[3c]">WDOG2_IRQHandler</a>
 <LI><a href="#[83]">XBAR1_IRQ_0_1_IRQHandler</a>
 <LI><a href="#[84]">XBAR1_IRQ_2_3_IRQHandler</a>
 <LI><a href="#[6]">NMI_Handler</a>
 <LI><a href="#[7]">HardFault_Handler</a>
 <LI><a href="#[b]">SVC_Handler</a>
 <LI><a href="#[d]">PendSV_Handler</a>
 <LI><a href="#[f]">DMA0_DMA16_IRQHandler</a>
 <LI><a href="#[10]">DMA1_DMA17_IRQHandler</a>
 <LI><a href="#[11]">DMA2_DMA18_IRQHandler</a>
 <LI><a href="#[12]">DMA3_DMA19_IRQHandler</a>
 <LI><a href="#[13]">DMA4_DMA20_IRQHandler</a>
 <LI><a href="#[14]">DMA5_DMA21_IRQHandler</a>
 <LI><a href="#[15]">DMA6_DMA22_IRQHandler</a>
 <LI><a href="#[16]">DMA7_DMA23_IRQHandler</a>
 <LI><a href="#[17]">DMA8_DMA24_IRQHandler</a>
 <LI><a href="#[18]">DMA9_DMA25_IRQHandler</a>
 <LI><a href="#[19]">DMA10_DMA26_IRQHandler</a>
 <LI><a href="#[1a]">DMA11_DMA27_IRQHandler</a>
 <LI><a href="#[1b]">DMA12_DMA28_IRQHandler</a>
 <LI><a href="#[1c]">DMA13_DMA29_IRQHandler</a>
 <LI><a href="#[1d]">DMA14_DMA30_IRQHandler</a>
 <LI><a href="#[1e]">DMA15_DMA31_IRQHandler</a>
 <LI><a href="#[1f]">DMA_ERROR_IRQHandler</a>
 <LI><a href="#[24]">LPUART2_IRQHandler</a>
 <LI><a href="#[25]">LPUART3_IRQHandler</a>
 <LI><a href="#[26]">LPUART4_IRQHandler</a>
 <LI><a href="#[27]">LPUART5_IRQHandler</a>
 <LI><a href="#[28]">LPUART6_IRQHandler</a>
 <LI><a href="#[29]">LPUART7_IRQHandler</a>
 <LI><a href="#[2a]">LPUART8_IRQHandler</a>
 <LI><a href="#[2b]">LPI2C1_IRQHandler</a>
 <LI><a href="#[2c]">LPI2C2_IRQHandler</a>
 <LI><a href="#[2d]">LPI2C3_IRQHandler</a>
 <LI><a href="#[2e]">LPI2C4_IRQHandler</a>
 <LI><a href="#[2f]">LPSPI1_IRQHandler</a>
 <LI><a href="#[30]">LPSPI2_IRQHandler</a>
 <LI><a href="#[31]">LPSPI3_IRQHandler</a>
 <LI><a href="#[32]">LPSPI4_IRQHandler</a>
 <LI><a href="#[33]">CAN1_IRQHandler</a>
 <LI><a href="#[34]">CAN2_IRQHandler</a>
 <LI><a href="#[47]">SAI1_IRQHandler</a>
 <LI><a href="#[48]">SAI2_IRQHandler</a>
 <LI><a href="#[49]">SAI3_RX_IRQHandler</a>
 <LI><a href="#[4a]">SAI3_TX_IRQHandler</a>
 <LI><a href="#[4b]">SPDIF_IRQHandler</a>
 <LI><a href="#[69]">FLEXIO1_IRQHandler</a>
 <LI><a href="#[6a]">FLEXIO2_IRQHandler</a>
 <LI><a href="#[7b]">FLEXSPI_IRQHandler</a>
 <LI><a href="#[7d]">USDHC1_IRQHandler</a>
 <LI><a href="#[7e]">USDHC2_IRQHandler</a>
 <LI><a href="#[81]">ENET_IRQHandler</a>
 <LI><a href="#[82]">ENET_1588_Timer_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b3]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">qsort</a><BR>
 <LI><a href="#[297]">mc_arc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[297]">mc_arc</a><BR>
 <LI><a href="#[2d0]">matchstar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cf]">matchhere</a><BR>
 <LI><a href="#[2cf]">matchhere</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cf]">matchhere</a><BR>
 <LI><a href="#[2ff]">stream_mpg_enable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[0]">protocol_enqueue_realtime_command</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8a]">ACMP1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8b]">ACMP2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8c]">ACMP3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8d]">ACMP4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[52]">ADC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[53]">ADC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[88]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[85]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[86]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[87]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[46]">BEE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cb]">CAN1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[33]">CAN1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cc]">CAN2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[34]">CAN2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6e]">CCM_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6f]">CCM_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[22]">CORE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3a]">CSI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[40]">CSU_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[20]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[21]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[54]">DCDC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[41]">DCP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[42]">DCP_VMI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[aa]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[f]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b4]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[19]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b5]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1a]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b6]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1b]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b7]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1c]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b8]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1d]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b9]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1e]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ab]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[10]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ac]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[11]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ad]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[12]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ae]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[13]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[af]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[14]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b0]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[15]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b1]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[16]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b2]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[17]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b3]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[18]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ba]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1f]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d9]">DbgConsole_Putchar</a> from fsl_debug_console.o(.text.DbgConsole_Putchar) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[1]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced 2 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[1]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced 87 times from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[90]">ENC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[91]">ENC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[92]">ENC3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[93]">ENC4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d8]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[82]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d7]">ENET_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[81]">ENET_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6d]">EWM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d2]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[69]">FLEXIO1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d3]">FLEXIO2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[6a]">FLEXIO2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[35]">FLEXRAM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d4]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7b]">FLEXSPI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[70]">GPC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5f]">GPIO1_Combined_0_15_IRQHandler</a> from bsp_key_it.o(.text.GPIO1_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[60]">GPIO1_Combined_16_31_IRQHandler</a> from driver.o(.text.GPIO1_Combined_16_31_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[57]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[58]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[59]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5a]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5b]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5c]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5d]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5e]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[61]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[62]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[63]">GPIO3_Combined_0_15_IRQHandler</a> from driver.o(.text.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[64]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[65]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[66]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[67]">GPIO5_Combined_0_15_IRQHandler</a> from bsp_key_it.o(.text.GPIO5_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[68]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[38]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[73]">GPT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[74]">GPT2_IRQHandler</a> from bsp_gpt.o(.text.GPT2_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[36]">KPP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[39]">LCDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c3]">LPI2C1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2b]">LPI2C1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c4]">LPI2C2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2c]">LPI2C2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c5]">LPI2C3_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2d]">LPI2C3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c6]">LPI2C4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2e]">LPI2C4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c7]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2f]">LPSPI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c8]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[30]">LPSPI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c9]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[31]">LPSPI3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ca]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[32]">LPSPI4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bb]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[23]">LPUART1_IRQHandler</a> from serial.o(.text.LPUART1_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bc]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[24]">LPUART2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bd]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[25]">LPUART3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[be]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[26]">LPUART4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[bf]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[27]">LPUART5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c0]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[28]">LPUART6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c1]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[29]">LPUART7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[c2]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2a]">LPUART8_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[89]">PIT_IRQHandler</a> from driver.o(.text.PIT_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4c]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[75]">PWM1_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[76]">PWM1_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[77]">PWM1_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[78]">PWM1_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[79]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[98]">PWM2_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[99]">PWM2_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9a]">PWM2_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9b]">PWM2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9c]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9d]">PWM3_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9e]">PWM3_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[9f]">PWM3_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a0]">PWM3_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a1]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a2]">PWM4_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a3]">PWM4_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a4]">PWM4_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a5]">PWM4_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a6]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3b]">PXP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[6c]">RTWDOG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[72]">Reserved115_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7a]">Reserved123_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8e]">Reserved143_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[8f]">Reserved144_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[43]">Reserved68_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4d]">Reserved78_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[55]">Reserved86_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[56]">Reserved87_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cd]">SAI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[47]">SAI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[ce]">SAI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[48]">SAI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[cf]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[49]">SAI3_RX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d0]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[4a]">SAI3_TX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7c]">SEMC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[45]">SJC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3d]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3e]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3f]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d1]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[4b]">SPDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[71]">SRC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b]">SVC_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[b]">SVC_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[e]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[e]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a8]">SystemInit</a> from system_mimxrt1052.o(.text.SystemInit) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[4e]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[4f]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[94]">TMR1_IRQHandler</a> from driver.o(.text.TMR1_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[95]">TMR2_IRQHandler</a> from driver.o(.text.TMR2_IRQHandler) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[96]">TMR3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[97]">TMR4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[44]">TRNG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[37]">TSC_DIG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[80]">USB_OTG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[7f]">USB_OTG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[50]">USB_PHY1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[51]">USB_PHY2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d5]">USDHC1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7d]">USDHC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[d6]">USDHC2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7e]">USDHC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[6b]">WDOG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[3c]">WDOG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[83]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[84]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.isr_vector)
 <LI><a href="#[eb]">__disable_irq</a> from driver.o(.text.__disable_irq) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[ea]">__enable_irq</a> from driver.o(.text.__enable_irq) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[a9]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[fa]">alarms_get_details</a> from alarms.o(.text.alarms_get_details) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[129]">await_toolchange_ack</a> from stream.o(.text.await_toolchange_ack) referenced 2 times from stream.o(.text.stream_rx_suspend)
 <LI><a href="#[ed]">bitsClearAtomic</a> from driver.o(.text.bitsClearAtomic) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[ec]">bitsSetAtomic</a> from driver.o(.text.bitsSetAtomic) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[19a]">build_info</a> from system.o(.text.build_info) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[190]">check_mode</a> from system.o(.text.check_mode) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[10f]">cmp_alarms</a> from report.o(.text.cmp_alarms) referenced 2 times from report.o(.text.report_alarm_details)
 <LI><a href="#[110]">cmp_errors</a> from report.o(.text.cmp_errors) referenced 2 times from report.o(.text.report_error_details)
 <LI><a href="#[119]">cmp_setting_group_id</a> from report.o(.text.cmp_setting_group_id) referenced 2 times from report.o(.text.report_setting_group_details)
 <LI><a href="#[11a]">cmp_setting_group_name</a> from report.o(.text.cmp_setting_group_name) referenced 2 times from report.o(.text.report_setting_group_details)
 <LI><a href="#[10c]">cmp_settings</a> from report.o(.text.cmp_settings) referenced 2 times from report.o(.text.print_settings_details)
 <LI><a href="#[10c]">cmp_settings</a> from report.o(.text.cmp_settings) referenced 2 times from report.o(.text.report_grbl_settings)
 <LI><a href="#[100]">control_interrupt_handler</a> from system.o(.text.control_interrupt_handler) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[e6]">coolantGetState</a> from driver.o(.text.coolantGetState) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[e5]">coolantSetState</a> from driver.o(.text.coolantSetState) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[13f]">coord_system</a> from ngc_params.o(.text.coord_system) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[140]">coord_system_offset</a> from ngc_params.o(.text.coord_system_offset) referenced 9 times from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[191]">disable_lock</a> from system.o(.text.disable_lock) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[db]">driver_delay</a> from driver.o(.text.driver_delay) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[da]">driver_setup</a> from driver.o(.text.driver_setup) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[f8]">dummy_bool_handler</a> from grbllib.o(.text.dummy_bool_handler) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[fd]">dummy_handler</a> from nuts_bolts.o(.text.dummy_handler) referenced 3 times from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[fd]">dummy_handler</a> from nuts_bolts.o(.text.dummy_handler) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[fe]">dummy_irq_claim</a> from grbllib.o(.text.dummy_irq_claim) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[197]">enter_sleep</a> from system.o(.text.enter_sleep) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[f0]">enumeratePins</a> from driver.o(.text.enumeratePins) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[1a0]">enumerate_alarms</a> from system.o(.text.enumerate_alarms) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a1]">enumerate_alarms_grblformatted</a> from system.o(.text.enumerate_alarms_grblformatted) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a8]">enumerate_all</a> from system.o(.text.enumerate_all) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a2]">enumerate_errors</a> from system.o(.text.enumerate_errors) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a3]">enumerate_errors_grblformatted</a> from system.o(.text.enumerate_errors_grblformatted) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a4]">enumerate_groups</a> from system.o(.text.enumerate_groups) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a9]">enumerate_pins</a> from system.o(.text.enumerate_pins) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a5]">enumerate_settings</a> from system.o(.text.enumerate_settings) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a6]">enumerate_settings_grblformatted</a> from system.o(.text.enumerate_settings_grblformatted) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[1a7]">enumerate_settings_halformatted</a> from system.o(.text.enumerate_settings_halformatted) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[fb]">errors_get_details</a> from errors.o(.text.errors_get_details) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[131]">execute_probe</a> from tool_change.o(.text.execute_probe) referenced 2 times from tool_change.o(.text.trap_control_cycle_start)
 <LI><a href="#[131]">execute_probe</a> from tool_change.o(.text.execute_probe) referenced 2 times from tool_change.o(.text.trap_stream_cycle_start)
 <LI><a href="#[132]">execute_restore</a> from tool_change.o(.text.execute_restore) referenced 2 times from tool_change.o(.text.trap_control_cycle_start)
 <LI><a href="#[132]">execute_restore</a> from tool_change.o(.text.execute_restore) referenced 2 times from tool_change.o(.text.trap_stream_cycle_start)
 <LI><a href="#[133]">execute_warning</a> from tool_change.o(.text.execute_warning) referenced 2 times from tool_change.o(.text.trap_control_cycle_start)
 <LI><a href="#[133]">execute_warning</a> from tool_change.o(.text.execute_warning) referenced 2 times from tool_change.o(.text.trap_stream_cycle_start)
 <LI><a href="#[11e]">fall_asleep</a> from sleep.o(.text.fall_asleep) referenced 2 times from sleep.o(.text.sleep_execute)
 <LI><a href="#[13a]">g28_home</a> from ngc_params.o(.text.g28_home) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[13b]">g30_home</a> from ngc_params.o(.text.g30_home) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[13e]">g92_offset</a> from ngc_params.o(.text.g92_offset) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[13d]">g92_offset_applied</a> from ngc_params.o(.text.g92_offset_applied) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[ef]">getElapsedTicks</a> from driver.o(.text.getElapsedTicks) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[112]">get_axis_value_inches</a> from report.o(.text.get_axis_value_inches) referenced 2 times from report.o(.text.report_init)
 <LI><a href="#[113]">get_axis_value_mm</a> from report.o(.text.get_axis_value_mm) referenced 2 times from report.o(.text.report_init)
 <LI><a href="#[114]">get_axis_values_inches</a> from report.o(.text.get_axis_values_inches) referenced 2 times from report.o(.text.report_init)
 <LI><a href="#[115]">get_axis_values_mm</a> from report.o(.text.get_axis_values_mm) referenced 2 times from report.o(.text.report_init)
 <LI><a href="#[174]">get_float</a> from settings.o(.text.get_float) referenced 6 times from settings.o(.rodata.setting_detail)
 <LI><a href="#[159]">get_int</a> from settings.o(.text.get_int) referenced 29 times from settings.o(.rodata.setting_detail)
 <LI><a href="#[116]">get_rate_value_inch</a> from report.o(.text.get_rate_value_inch) referenced 2 times from report.o(.text.report_init)
 <LI><a href="#[117]">get_rate_value_mm</a> from report.o(.text.get_rate_value_mm) referenced 2 times from report.o(.text.report_init)
 <LI><a href="#[192]">home</a> from system.o(.text.home) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[193]">home_x</a> from system.o(.text.home_x) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[194]">home_y</a> from system.o(.text.home_y) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[195]">home_z</a> from system.o(.text.home_z) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[172]">is_group_available</a> from settings.o(.text.is_group_available) referenced 9 times from settings.o(.rodata.setting_detail)
 <LI><a href="#[15a]">is_setting_available</a> from settings.o(.text.is_setting_available) referenced 29 times from settings.o(.rodata.setting_detail)
 <LI><a href="#[188]">jog</a> from system.o(.text.jog) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[ff]">limit_interrupt_handler</a> from limits.o(.text.limit_interrupt_handler) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[e3]">limitsEnable</a> from driver.o(.text.limitsEnable) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[e4]">limitsGetState</a> from driver.o(.text.limitsGetState) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[141]">m66_result</a> from ngc_params.o(.text.m66_result) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[a7]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f3]">memcpy_from_flash</a> from flash.o(.text.memcpy_from_flash) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[108]">memcpy_from_ram</a> from nvs_buffer.o(.text.memcpy_from_ram) referenced 2 times from nvs_buffer.o(.text.nvs_buffer_init)
 <LI><a href="#[f4]">memcpy_to_flash</a> from flash.o(.text.memcpy_to_flash) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[107]">memcpy_to_ram</a> from nvs_buffer.o(.text.memcpy_to_ram) referenced 2 times from nvs_buffer.o(.text.nvs_buffer_init)
 <LI><a href="#[e2]">motor_iterator</a> from driver.o(.text.motor_iterator) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[185]">null_count</a> from stream.o(.text.null_count) referenced 2 times from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[181]">null_enqueue_rt_command</a> from stream.o(.text.null_enqueue_rt_command) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[17b]">null_get_pwm</a> from spindle_control.o(.text.null_get_pwm) referenced from spindle_control.o(.rodata.spindle_add_null.spindle)
 <LI><a href="#[17a]">null_get_state</a> from spindle_control.o(.text.null_get_state) referenced from spindle_control.o(.rodata.spindle_add_null.spindle)
 <LI><a href="#[180]">null_put_c</a> from stream.o(.text.null_put_c) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[17e]">null_rx_free</a> from stream.o(.text.null_rx_free) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[186]">null_set_baudrate</a> from stream.o(.text.null_set_baudrate) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[182]">null_set_rt_handler</a> from stream.o(.text.null_set_rt_handler) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[179]">null_set_state</a> from spindle_control.o(.text.null_set_state) referenced from spindle_control.o(.rodata.spindle_add_null.spindle)
 <LI><a href="#[183]">null_suspend_disable</a> from stream.o(.text.null_suspend_disable) referenced 2 times from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[17c]">null_update_pwm</a> from spindle_control.o(.text.null_update_pwm) referenced from spindle_control.o(.rodata.spindle_add_null.spindle)
 <LI><a href="#[17d]">null_update_rpm</a> from spindle_control.o(.text.null_update_rpm) referenced from spindle_control.o(.rodata.spindle_add_null.spindle)
 <LI><a href="#[184]">null_write</a> from stream.o(.text.null_write) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[17f]">null_write_string</a> from stream.o(.text.null_write_string) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[109]">nvs_warning</a> from nvs_buffer.o(.text.nvs_warning) referenced 2 times from nvs_buffer.o(.text.nvs_buffer_init)
 <LI><a href="#[130]">on_probe_completed</a> from tool_change.o(.text.on_probe_completed) referenced 2 times from tool_change.o(.text.tool_change)
 <LI><a href="#[12e]">on_toolchange_ack</a> from tool_change.o(.text.on_toolchange_ack) referenced 2 times from tool_change.o(.text.tc_init)
 <LI><a href="#[19b]">output_all_build_info</a> from system.o(.text.output_all_build_info) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[18b]">output_all_settings</a> from system.o(.text.output_all_settings) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[196]">output_help</a> from system.o(.text.output_help) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[128]">output_message</a> from stepper.o(.text.output_message) referenced 2 times from stepper.o(.text.stepper_driver_interrupt_handler)
 <LI><a href="#[189]">output_ngc_parameters</a> from system.o(.text.output_ngc_parameters) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[187]">output_parser_state</a> from system.o(.text.output_parser_state) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[18c]">output_setting_description</a> from system.o(.text.output_setting_description) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[18a]">output_settings</a> from system.o(.text.output_settings) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[19d]">output_startup_lines</a> from system.o(.text.output_startup_lines) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[111]">print_setting</a> from report.o(.text.print_setting) referenced 4 times from report.o(.text.report_grbl_settings)
 <LI><a href="#[10d]">print_sorted</a> from report.o(.text.print_sorted) referenced 2 times from report.o(.text.print_settings_details)
 <LI><a href="#[10e]">print_unsorted</a> from report.o(.text.print_unsorted) referenced 2 times from report.o(.text.print_settings_details)
 <LI><a href="#[e8]">probeConfigure</a> from driver.o(.text.probeConfigure) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[e7]">probeGetState</a> from driver.o(.text.probeGetState) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[138]">probe_coord</a> from ngc_params.o(.text.probe_coord) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[139]">probe_result</a> from ngc_params.o(.text.probe_result) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[f6]">protocol_enqueue_gcode</a> from protocol.o(.text.protocol_enqueue_gcode) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[0]">protocol_enqueue_realtime_command</a> from protocol.o(.text.protocol_enqueue_realtime_command) referenced 4 times from stream.o(.data.enqueue_realtime_command)
 <LI><a href="#[0]">protocol_enqueue_realtime_command</a> from protocol.o(.text.protocol_enqueue_realtime_command) referenced 2 times from stream.o(.text.stream_select)
 <LI><a href="#[f5]">protocol_execute_noop</a> from protocol.o(.text.protocol_execute_noop) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[105]">ram_get_byte</a> from nvs_buffer.o(.text.ram_get_byte) referenced 2 times from nvs_buffer.o(.text.nvs_buffer_init)
 <LI><a href="#[106]">ram_put_byte</a> from nvs_buffer.o(.text.ram_put_byte) referenced 2 times from nvs_buffer.o(.text.nvs_buffer_init)
 <LI><a href="#[f1]">registerPeriphPin</a> from driver.o(.text.registerPeriphPin) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[1ab]">report_current_limit_state</a> from report.o(.text.report_current_limit_state) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[103]">report_driver_error</a> from grbllib.o(.text.report_driver_error) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[148]">report_feedback_message</a> from report.o(.text.report_feedback_message) referenced from report.o(.rodata.report_fns)
 <LI><a href="#[1aa]">report_last_signals_event</a> from report.o(.text.report_last_signals_event) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[118]">report_pin</a> from report.o(.text.report_pin) referenced 2 times from report.o(.text.report_pins)
 <LI><a href="#[146]">report_setting</a> from report.o(.text.report_setting) referenced from report.o(.rodata.report_fns)
 <LI><a href="#[1ac]">report_spindle_data</a> from report.o(.text.report_spindle_data) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[147]">report_status_message</a> from report.o(.text.report_status_message) referenced from report.o(.rodata.report_fns)
 <LI><a href="#[12f]">reset</a> from tool_change.o(.text.reset) referenced 2 times from tool_change.o(.text.tc_init)
 <LI><a href="#[13c]">scaling_factors</a> from ngc_params.o(.text.scaling_factors) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[153]">serialDisable</a> from serial.o(.text.serialDisable) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[14c]">serialEnqueueRtCommand</a> from serial.o(.text.serialEnqueueRtCommand) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[14d]">serialGetC</a> from serial.o(.text.serialGetC) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[2]">serialInit</a> from serial.o(.text.serialInit) referenced 2 times from serial.o(.data.serial)
 <LI><a href="#[14b]">serialPutC</a> from serial.o(.text.serialPutC) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[14f]">serialRxCancel</a> from serial.o(.text.serialRxCancel) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[154]">serialRxCount</a> from serial.o(.text.serialRxCount) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[14e]">serialRxFlush</a> from serial.o(.text.serialRxFlush) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[149]">serialRxFree</a> from serial.o(.text.serialRxFree) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[157]">serialSetBaudRate</a> from serial.o(.text.serialSetBaudRate) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[150]">serialSetRtHandler</a> from serial.o(.text.serialSetRtHandler) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[151]">serialSuspendInput</a> from serial.o(.text.serialSuspendInput) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[155]">serialTxCount</a> from serial.o(.text.serialTxCount) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[156]">serialTxFlush</a> from serial.o(.text.serialTxFlush) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[152]">serialWrite</a> from serial.o(.text.serialWrite) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[14a]">serialWriteS</a> from serial.o(.text.serialWriteS) referenced from serial.o(.rodata.serialInit.stream)
 <LI><a href="#[f2]">setPeriphPinDescription</a> from driver.o(.text.setPeriphPinDescription) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[173]">set_axis_setting</a> from settings.o(.text.set_axis_setting) referenced 5 times from settings.o(.rodata.setting_detail)
 <LI><a href="#[162]">set_control_disable_pullup</a> from settings.o(.text.set_control_disable_pullup) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[160]">set_control_invert</a> from settings.o(.text.set_control_invert) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[169]">set_enable_legacy_rt_commands</a> from settings.o(.text.set_enable_legacy_rt_commands) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[170]">set_force_initialization_alarm</a> from settings.o(.text.set_force_initialization_alarm) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[177]">set_g92_disable_persistence</a> from settings.o(.text.set_g92_disable_persistence) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[15c]">set_ganged_dir_invert</a> from settings.o(.text.set_ganged_dir_invert) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[165]">set_hard_limits_enable</a> from settings.o(.text.set_hard_limits_enable) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[16f]">set_hold_actions</a> from settings.o(.text.set_hold_actions) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[16c]">set_homing_cycle</a> from settings.o(.text.set_homing_cycle) referenced 3 times from settings.o(.rodata.setting_detail)
 <LI><a href="#[166]">set_homing_enable</a> from settings.o(.text.set_homing_enable) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[16a]">set_jog_soft_limited</a> from settings.o(.text.set_jog_soft_limited) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[167]">set_mode</a> from settings.o(.text.set_mode) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[16b]">set_parking_enable</a> from settings.o(.text.set_parking_enable) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[171]">set_probe_allow_feed_override</a> from settings.o(.text.set_probe_allow_feed_override) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[163]">set_probe_disable_pullup</a> from settings.o(.text.set_probe_disable_pullup) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[158]">set_probe_invert</a> from settings.o(.text.set_probe_invert) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[15b]">set_pwm_mode</a> from settings.o(.text.set_pwm_mode) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[15d]">set_pwm_options</a> from settings.o(.text.set_pwm_options) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[15f]">set_report_inches</a> from settings.o(.text.set_report_inches) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[15e]">set_report_mask</a> from settings.o(.text.set_report_mask) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[16d]">set_restore_overrides</a> from settings.o(.text.set_restore_overrides) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[16e]">set_sleep_enable</a> from settings.o(.text.set_sleep_enable) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[164]">set_soft_limits_enable</a> from settings.o(.text.set_soft_limits_enable) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[161]">set_spindle_invert</a> from settings.o(.text.set_spindle_invert) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[178]">set_spindle_type</a> from settings.o(.text.set_spindle_type) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[19e]">set_startup_line0</a> from system.o(.text.set_startup_line0) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[19f]">set_startup_line1</a> from system.o(.text.set_startup_line1) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[168]">set_stepper_deenergize_mask</a> from settings.o(.text.set_stepper_deenergize_mask) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[175]">set_tool_change_mode</a> from settings.o(.text.set_tool_change_mode) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[176]">set_tool_change_probing_distance</a> from settings.o(.text.set_tool_change_probing_distance) referenced from settings.o(.rodata.setting_detail)
 <LI><a href="#[198]">set_tool_reference</a> from system.o(.text.set_tool_reference) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[dc]">settings_changed</a> from driver.o(.text.settings_changed) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[fc]">settings_get_details</a> from settings.o(.text.settings_get_details) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[19c]">settings_reset</a> from system.o(.text.settings_reset) referenced 2 times from system.o(.rodata.sys_commands)
 <LI><a href="#[3]">settings_write_global</a> from settings.o(.text.settings_write_global) referenced 2 times from settings.o(.data.setting_details)
 <LI><a href="#[134]">spindleConfig</a> from driver.o(.text.spindleConfig) referenced from driver.o(.rodata.driver_init.spindle)
 <LI><a href="#[136]">spindleGetPWM</a> from driver.o(.text.spindleGetPWM) referenced from driver.o(.rodata.driver_init.spindle)
 <LI><a href="#[11c]">spindleGetState</a> from driver.o(.text.spindleGetState) referenced from driver.o(.rodata.driver_init.spindle)
 <LI><a href="#[11c]">spindleGetState</a> from driver.o(.text.spindleGetState) referenced 2 times from driver.o(.text.settings_changed)
 <LI><a href="#[135]">spindleSetState</a> from driver.o(.text.spindleSetState) referenced from driver.o(.rodata.driver_init.spindle)
 <LI><a href="#[1ad]">spindle_reset_data</a> from system.o(.text.spindle_reset_data) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[137]">spindle_set_speed</a> from driver.o(.text.spindle_set_speed) referenced from driver.o(.rodata.driver_init.spindle)
 <LI><a href="#[11f]">st_deenergize</a> from stepper.o(.text.st_deenergize) referenced 2 times from stepper.o(.text.st_go_idle)
 <LI><a href="#[104]">state_await_hold</a> from state_machine.o(.text.state_await_hold) referenced 2 times from state_machine.o(.text.initiate_hold)
 <LI><a href="#[104]">state_await_hold</a> from state_machine.o(.text.state_await_hold) referenced 2 times from state_machine.o(.text.state_await_restart_retract)
 <LI><a href="#[123]">state_await_motion_cancel</a> from state_machine.o(.text.state_await_motion_cancel) referenced 2 times from state_machine.o(.text.state_cycle)
 <LI><a href="#[11b]">state_await_restart_retract</a> from state_machine.o(.text.state_await_restart_retract) referenced 2 times from state_machine.o(.text.restart_retract)
 <LI><a href="#[121]">state_await_resume</a> from state_machine.o(.text.state_await_resume) referenced 2 times from state_machine.o(.text.state_await_hold)
 <LI><a href="#[121]">state_await_resume</a> from state_machine.o(.text.state_await_resume) referenced 2 times from state_machine.o(.text.state_await_waypoint_retract)
 <LI><a href="#[121]">state_await_resume</a> from state_machine.o(.text.state_await_resume) referenced 2 times from state_machine.o(.text.state_set)
 <LI><a href="#[121]">state_await_resume</a> from state_machine.o(.text.state_await_resume) referenced 2 times from state_machine.o(.text.state_suspend_manager)
 <LI><a href="#[124]">state_await_resumed</a> from state_machine.o(.text.state_await_resumed) referenced 2 times from state_machine.o(.text.state_restore)
 <LI><a href="#[126]">state_await_toolchanged</a> from state_machine.o(.text.state_await_toolchanged) referenced 2 times from state_machine.o(.text.state_set)
 <LI><a href="#[120]">state_await_waypoint_retract</a> from state_machine.o(.text.state_await_waypoint_retract) referenced 2 times from state_machine.o(.text.state_await_hold)
 <LI><a href="#[125]">state_cycle</a> from state_machine.o(.text.state_cycle) referenced 4 times from state_machine.o(.text.state_set)
 <LI><a href="#[4]">state_idle</a> from state_machine.o(.text.state_idle) referenced 2 times from state_machine.o(.data.stateHandler)
 <LI><a href="#[4]">state_idle</a> from state_machine.o(.text.state_idle) referenced 2 times from state_machine.o(.text.state_set)
 <LI><a href="#[127]">state_noop</a> from state_machine.o(.text.state_noop) referenced 2 times from state_machine.o(.text.state_set)
 <LI><a href="#[122]">state_restore</a> from state_machine.o(.text.state_restore) referenced 2 times from state_machine.o(.text.state_await_resume)
 <LI><a href="#[e0]">stepperCyclesPerTick</a> from driver.o(.text.stepperCyclesPerTick) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[df]">stepperEnable</a> from driver.o(.text.stepperEnable) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[de]">stepperGoIdle</a> from driver.o(.text.stepperGoIdle) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[e1]">stepperPulseStart</a> from driver.o(.text.stepperPulseStart) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[e1]">stepperPulseStart</a> from driver.o(.text.stepperPulseStart) referenced 2 times from driver.o(.text.settings_changed)
 <LI><a href="#[11d]">stepperPulseStartDelayed</a> from driver.o(.text.stepperPulseStartDelayed) referenced 2 times from driver.o(.text.settings_changed)
 <LI><a href="#[dd]">stepperWakeUp</a> from driver.o(.text.stepperWakeUp) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[101]">stepper_driver_interrupt_handler</a> from stepper.o(.text.stepper_driver_interrupt_handler) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[f7]">stream_enqueue_realtime_command</a> from stream.o(.text.stream_enqueue_realtime_command) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[12a]">stream_get_null</a> from stream.o(.text.stream_get_null) referenced from stream.o(.rodata.stream_null_init.stream)
 <LI><a href="#[12a]">stream_get_null</a> from stream.o(.text.stream_get_null) referenced 2 times from stream.o(.text.stream_rx_suspend)
 <LI><a href="#[145]">stream_null_init</a> from stream.o(.text.stream_null_init) referenced from stream.o(.rodata.null_stream)
 <LI><a href="#[102]">stream_tx_blocking</a> from stream.o(.text.stream_tx_blocking) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[12b]">stream_write_all</a> from stream.o(.text.stream_write_all) referenced 2 times from stream.o(.text.stream_select)
 <LI><a href="#[e9]">systemGetState</a> from driver.o(.text.systemGetState) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[f9]">system_command_help</a> from system.o(.text.system_command_help) referenced 2 times from grbllib.o(.text.grbl_enter)
 <LI><a href="#[18d]">toggle_block_delete</a> from system.o(.text.toggle_block_delete) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[18f]">toggle_optional_stop</a> from system.o(.text.toggle_optional_stop) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[18e]">toggle_single_block</a> from system.o(.text.toggle_single_block) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[12d]">tool_change</a> from tool_change.o(.text.tool_change) referenced 2 times from tool_change.o(.text.tc_init)
 <LI><a href="#[142]">tool_number</a> from ngc_params.o(.text.tool_number) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[143]">tool_offset</a> from ngc_params.o(.text.tool_offset) referenced from ngc_params.o(.rodata.ngc_ro_params)
 <LI><a href="#[199]">tool_probe_workpiece</a> from system.o(.text.tool_probe_workpiece) referenced from system.o(.rodata.sys_commands)
 <LI><a href="#[12c]">tool_select</a> from tool_change.o(.text.tool_select) referenced 2 times from tool_change.o(.text.tc_init)
 <LI><a href="#[10a]">trap_control_cycle_start</a> from tool_change.o(.text.trap_control_cycle_start) referenced 2 times from tool_change.o(.text.on_toolchange_ack)
 <LI><a href="#[10b]">trap_stream_cycle_start</a> from tool_change.o(.text.trap_stream_cycle_start) referenced 2 times from tool_change.o(.text.on_toolchange_ack)
 <LI><a href="#[ee]">valueSetAtomic</a> from driver.o(.text.valueSetAtomic) referenced 2 times from driver.o(.text.driver_init)
 <LI><a href="#[144]">work_position</a> from ngc_params.o(.text.work_position) referenced from ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a9]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[365]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[1ae]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1bc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[366]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[367]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[368]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[369]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[36a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8b]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8c]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8d]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>ADC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[88]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[86]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[87]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>BEE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[cb]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6f]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>CORE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>CSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>CSU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>DCDC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>DCP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[aa]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[90]"></a>ENC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[91]"></a>ENC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[92]"></a>ENC3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[93]"></a>ENC4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d8]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d2]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d4]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>GPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[61]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[64]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[65]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[68]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>GPT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>KPP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[c3]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[76]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[77]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[78]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[79]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[98]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[99]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9a]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9b]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9d]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9e]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[9f]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a1]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a2]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a3]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a4]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a5]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a6]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>PXP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6c]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[72]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8e]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[8f]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[cd]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>SEMC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>SJC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d1]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>SRC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[96]"></a>TMR3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>TMR4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>TRNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[80]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7f]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d5]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6b]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[83]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[69]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7b]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7d]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[82]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStartDelayed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_setup
</UL>

<P><STRONG><a name="[1b3]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[28a]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ilabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[2d2]"></a>labs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ilabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[36b]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[24e]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_setup_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_driver_interrupt_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_select
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_fns
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_interrupt_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_cubic_b_spline
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_canned_drill
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_normalize_block
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_output_command
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_select
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_rx_suspend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_select
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;await_toolchange_ack
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_restore_buffer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_waypoint_retract
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_hold
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerPeriphPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_flash
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
</UL>

<P><STRONG><a name="[36f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_sync_physical
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiate_hold
</UL>

<P><STRONG><a name="[29f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_driver_error
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_add_spindle_type
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_coord_system
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_values_mm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_values_inches
</UL>

<P><STRONG><a name="[325]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>

<P><STRONG><a name="[319]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_group_settings
</UL>

<P><STRONG><a name="[2a1]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnumentries
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_places
</UL>

<P><STRONG><a name="[205]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_info
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_add_spindle_type
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_validate_me
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
</UL>

<P><STRONG><a name="[256]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ngc_named_param_get
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_validate_me
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_setting_group_name
</UL>

<P><STRONG><a name="[28c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[28f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_gcode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_driver_error
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_last_signals_event
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_limit_state
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_coord_system
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_value_mm
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_value_inches
</UL>

<P><STRONG><a name="[29d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_gcode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_normalize_block
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_elements
</UL>

<P><STRONG><a name="[312]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
</UL>

<P><STRONG><a name="[33a]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_elements
</UL>

<P><STRONG><a name="[1b7]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[370]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[371]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>

<P><STRONG><a name="[373]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[1bb]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[374]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[1af]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[375]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1768 bytes, Stack size 64 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_MQSConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_EnableMode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetXtalFreq
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRtcXtalFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[1d0]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 856 bytes, Stack size 56 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BOARD_ConfigMPU &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMux
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialSetBaudRate
</UL>

<P><STRONG><a name="[1d9]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock_config.o(.text.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>BOARD_InitBootPins</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(.text.BOARD_InitBootPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BOARD_InitBootPins &rArr; BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>BOARD_InitPins</STRONG> (Thumb, 1472 bytes, Stack size 200 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
</UL>

<P><STRONG><a name="[1c9]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1cb]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1cc]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ef]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1f1]"></a>CLOCK_GetFreq</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRtcFreq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStartDelayed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_setup
</UL>

<P><STRONG><a name="[1f3]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1f4]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1d6]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 998 bytes, Stack size 56 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllEnabled
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllBypassed
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[1f2]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1f9]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[1f7]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1c6]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_InitArmPll
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c0]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c1]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c8]"></a>CLOCK_InitSysPfd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, fsl_clock.o(.text.CLOCK_InitSysPfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_InitSysPfd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c7]"></a>CLOCK_InitSysPll</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_InitSysPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_InitSysPll
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c2]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_SwitchOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ff]"></a>DCACHE_InvalidateByRange</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_cache.o(.text.DCACHE_InvalidateByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCACHE_InvalidateByRange &rArr; L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_flash
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_flash
</UL>

<P><STRONG><a name="[201]"></a>DbgConsole_Printf</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[d9]"></a>DbgConsole_Putchar</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[23d]"></a>Driver_IncTick</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver.o(.text.Driver_IncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Driver_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[27c]"></a>FLEXSPI_NorFlash_GetConfig_Hyperflash</STRONG> (Thumb, 708 bytes, Stack size 24 bytes, main.o(.text.FLEXSPI_NorFlash_GetConfig_Hyperflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXSPI_NorFlash_GetConfig_Hyperflash
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[5f]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_key_it.o(.text.GPIO1_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO1_Combined_0_15_IRQHandler &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, driver.o(.text.GPIO1_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GPIO1_Combined_16_31_IRQHandler &rArr; systemGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemGetState
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, driver.o(.text.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler &rArr; limitsGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitsGetState
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[67]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_key_it.o(.text.GPIO5_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO5_Combined_0_15_IRQHandler &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[212]"></a>GPIO_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2char
</UL>

<P><STRONG><a name="[214]"></a>GPIO_PinInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_setup
</UL>

<P><STRONG><a name="[219]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>

<P><STRONG><a name="[215]"></a>GPIO_PinWrite</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStartDelayed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperGoIdle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperEnable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_on
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_off
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_dir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_setup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolantSetState
</UL>

<P><STRONG><a name="[74]"></a>GPT2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_gpt.o(.text.GPT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT2_IRQHandler &rArr; GPT_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[bb]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, serial.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPUART1_IRQHandler &rArr; LPUART_ClearStatusFlags &rArr; LPUART_GetStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[bc]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[21d]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fsl_lpuart.o(.text.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART_ClearStatusFlags &rArr; LPUART_GetStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[246]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
</UL>

<P><STRONG><a name="[21e]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
</UL>

<P><STRONG><a name="[21f]"></a>LPUART_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[21b]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>LPUART_Init</STRONG> (Thumb, 872 bytes, Stack size 56 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
</UL>

<P><STRONG><a name="[222]"></a>LPUART_SetBaudRate</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, fsl_lpuart.o(.text.LPUART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LPUART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialSetBaudRate
</UL>

<P><STRONG><a name="[89]"></a>PIT_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, driver.o(.text.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PIT_IRQHandler &rArr; PIT_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[227]"></a>PIT_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_pit.o(.text.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PIT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[22a]"></a>PIT_TIMER_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, bsp_pit.o(.text.PIT_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PIT_TIMER_Init &rArr; PIT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetDefaultConfig
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_EnableInterrupts
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_setup
</UL>

<P><STRONG><a name="[240]"></a>QTMR_ClearStatusFlags</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[33e]"></a>QTMR_DisableInterrupts</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
</UL>

<P><STRONG><a name="[244]"></a>QTMR_EnableInterrupts</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
</UL>

<P><STRONG><a name="[22e]"></a>QTMR_GetDefaultConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = QTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
</UL>

<P><STRONG><a name="[23f]"></a>QTMR_GetStatus</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[230]"></a>QTMR_Init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, fsl_qtmr.o(.text.QTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = QTMR_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
</UL>

<P><STRONG><a name="[241]"></a>QTMR_SetTimerPeriod</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_qtmr.o(.text.QTMR_SetTimerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_SetTimerPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStartDelayed
</UL>

<P><STRONG><a name="[231]"></a>ROM_FLEXSPI_NorFlash_ClearCache</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_romapi.o(.text.ROM_FLEXSPI_NorFlash_ClearCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ROM_FLEXSPI_NorFlash_ClearCache &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[234]"></a>ROM_FLEXSPI_NorFlash_Erase</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, fsl_romapi.o(.text.ROM_FLEXSPI_NorFlash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ROM_FLEXSPI_NorFlash_Erase &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_flash
</UL>

<P><STRONG><a name="[235]"></a>ROM_FLEXSPI_NorFlash_Init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fsl_romapi.o(.text.ROM_FLEXSPI_NorFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ROM_FLEXSPI_NorFlash_Init &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[236]"></a>ROM_FLEXSPI_NorFlash_ProgramPage</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, fsl_romapi.o(.text.ROM_FLEXSPI_NorFlash_ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ROM_FLEXSPI_NorFlash_ProgramPage &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_flash
</UL>

<P><STRONG><a name="[237]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fsl_common_arm.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[239]"></a>Set_NVIC_PriorityGroup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_nvic .o(.text.Set_NVIC_PriorityGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_NVIC_PriorityGroup &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SysTick_Handler &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_IncTick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[a8]"></a>SystemInit</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, system_mimxrt1052.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1052.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[94]"></a>TMR1_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, driver.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = TMR1_IRQHandler &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[95]"></a>TMR2_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, driver.o(.text.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TMR2_IRQHandler &rArr; systemGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_signals_merge
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemGetState
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitsGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.isr_vector)
</UL>
<P><STRONG><a name="[243]"></a>TMRn_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_tmr.o(.text.TMRn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TMRn_Init &rArr; QTMR_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_setup
</UL>

<P><STRONG><a name="[245]"></a>UART_ModeConfig</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, bsp_uart.o(.text.UART_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART_ModeConfig &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_assert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetDefaultConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetBaudRate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_startup_line
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>

<P><STRONG><a name="[fa]"></a>alarms_get_details</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarms.o(.text.alarms_get_details))
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[2df]"></a>calc_checksum</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, nuts_bolts.o(.text.calc_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_ram
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_ram
</UL>

<P><STRONG><a name="[100]"></a>control_interrupt_handler</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, system.o(.text.control_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = control_interrupt_handler &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[258]"></a>convert_delta_vector_to_unit_vector</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, nuts_bolts.o(.text.convert_delta_vector_to_unit_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = convert_delta_vector_to_unit_vector &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[25c]"></a>coolant_set_state</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, coolant_control.o(.text.coolant_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_conditions
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
</UL>

<P><STRONG><a name="[25a]"></a>coolant_sync</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, coolant_control.o(.text.coolant_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = coolant_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
</UL>

<P><STRONG><a name="[25e]"></a>delay_sec</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nuts_bolts.o(.text.delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_door_reopened
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_conditions
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_restore
</UL>

<P><STRONG><a name="[266]"></a>driver_init</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, driver.o(.text.driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = driver_init &rArr; stream_connect &rArr; stream_select &rArr; add_connection &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_plugin_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_connect
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_register
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRegisterStreams
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[f8]"></a>dummy_bool_handler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, grbllib.o(.text.dummy_bool_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_bool_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[fd]"></a>dummy_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nuts_bolts.o(.text.dummy_handler))
<BR>[Address Reference Count : 2]<UL><LI> grbllib.o(.text.grbl_enter)
<LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[2bb]"></a>enqueue_accessory_override</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, override.o(.text.enqueue_accessory_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enqueue_accessory_override
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiate_hold
</UL>

<P><STRONG><a name="[300]"></a>enqueue_feed_override</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, override.o(.text.enqueue_feed_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enqueue_feed_override
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[27d]"></a>error_trap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.error_trap))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[fb]"></a>errors_get_details</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, errors.o(.text.errors_get_details))
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[27b]"></a>flash_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, main.o(.text.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_init &rArr; ROM_FLEXSPI_NorFlash_Init &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_trap
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_NorFlash_GetConfig_Hyperflash
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_ClearCache
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2af]"></a>flush_override_buffers</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, override.o(.text.flush_override_buffers))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[29e]"></a>ftoa</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, nuts_bolts.o(.text.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftoa
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_value
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_spindle_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameter
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_named_ngc_parameter
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_values_mm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_values_inches
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_value_mm
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_axis_value_inches
</UL>

<P><STRONG><a name="[2d6]"></a>gc_coolant_off</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gcode.o(.text.gc_coolant_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gc_coolant_off
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[27e]"></a>gc_execute_block</STRONG> (Thumb, 20000 bytes, Stack size 600 bytes, gcode.o(.text.gc_execute_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_override
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_feed_override
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_override_ctrl_update
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_cubic_b_spline
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_canned_drill
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isintf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_normalize_block
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_plane_data
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_offset
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scaling
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_is_lasercut
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sync_motion
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_block_offset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_output_command
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabsf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog
</UL>

<P><STRONG><a name="[315]"></a>gc_get_g51_state</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gcode.o(.text.gc_get_g51_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_get_g51_state
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scaling
</UL>

<P><STRONG><a name="[248]"></a>gc_get_offset</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, gcode.o(.text.gc_get_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gc_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_relative_pos
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
</UL>

<P><STRONG><a name="[286]"></a>gc_get_plane_data</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gcode.o(.text.gc_get_plane_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gc_get_plane_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_clear_tlo_reference
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tool_reference
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[31d]"></a>gc_get_scaling</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gcode.o(.text.gc_get_scaling))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaling_factors
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[29c]"></a>gc_init</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, gcode.o(.text.gc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gc_init &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scaling
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[27f]"></a>gc_normalize_block</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, gcode.o(.text.gc_normalize_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gc_normalize_block &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line
</UL>

<P><STRONG><a name="[277]"></a>gc_set_tool_offset</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, gcode.o(.text.gc_set_tool_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = gc_set_tool_offset &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_probe_completed
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
</UL>

<P><STRONG><a name="[2d5]"></a>gc_spindle_off</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gcode.o(.text.gc_spindle_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gc_spindle_off
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_select
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
</UL>

<P><STRONG><a name="[30b]"></a>get_accessory_override</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, override.o(.text.get_accessory_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_accessory_override
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[30a]"></a>get_feed_override</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, override.o(.text.get_feed_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_feed_override
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[2a8]"></a>grbl_enter</STRONG> (Thumb, 1248 bytes, Stack size 88 bytes, grbllib.o(.text.grbl_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = grbl_enter &rArr; protocol_main_loop &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_select
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_fns
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_rt_command
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_alloc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_set_homing_axes
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_override_buffers
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b9]"></a>initiate_hold</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, state_machine.o(.text.initiate_hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initiate_hold &rArr; enqueue_accessory_override
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_accessory_override
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>

<P><STRONG><a name="[28b]"></a>isintf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nuts_bolts.o(.text.isintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = isintf &rArr; __hardfp_truncf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabsf
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_validate_me
</UL>

<P><STRONG><a name="[ff]"></a>limit_interrupt_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, limits.o(.text.limit_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = limit_interrupt_handler &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[242]"></a>limit_signals_merge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, limits.o(.text.limit_signals_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = limit_signals_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_lock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[2c3]"></a>limits_go_home</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, limits.o(.text.limits_go_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = limits_go_home &rArr; limits_homing_cycle &rArr; limits_pull_off &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_clear_tlo_reference
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_signals_select
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[263]"></a>limits_homing_required</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, limits.o(.text.limits_homing_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = limits_homing_required
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_lock
</UL>

<P><STRONG><a name="[2b2]"></a>limits_set_homing_axes</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, limits.o(.text.limits_set_homing_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = limits_set_homing_axes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_homing_cycle
</UL>

<P><STRONG><a name="[2cb]"></a>limits_set_machine_positions</STRONG> (Thumb, 336 bytes, Stack size 28 bytes, limits.o(.text.limits_set_machine_positions))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = limits_set_machine_positions
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
</UL>

<P><STRONG><a name="[2cc]"></a>limits_soft_check</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, limits.o(.text.limits_soft_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[a7]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = main &rArr; grbl_enter &rArr; protocol_main_loop &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_NVIC_PriorityGroup
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2cf]"></a>matchhere</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, regex.o(.text.matchhere))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = matchhere &rArr;  matchhere (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchstar
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchhere
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchstar
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchhere
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_group_settings
</UL>

<P><STRONG><a name="[2d0]"></a>matchstar</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, regex.o(.text.matchstar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = matchstar &rArr;  matchhere (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchhere
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchhere
</UL>

<P><STRONG><a name="[297]"></a>mc_arc</STRONG> (Thumb, 1280 bytes, Stack size 152 bytes, motion_control.o(.text.mc_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + In Cycle
<LI>Call Chain = mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabsf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[29b]"></a>mc_canned_drill</STRONG> (Thumb, 944 bytes, Stack size 56 bytes, motion_control.o(.text.mc_canned_drill))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = mc_canned_drill &rArr; spindle_sync &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[298]"></a>mc_cubic_b_spline</STRONG> (Thumb, 732 bytes, Stack size 104 bytes, motion_control.o(.text.mc_cubic_b_spline))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mc_cubic_b_spline &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_bezier
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dist1
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[294]"></a>mc_dwell</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, motion_control.o(.text.mc_dwell))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mc_dwell &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_canned_drill
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[2a5]"></a>mc_homing_cycle</STRONG> (Thumb, 868 bytes, Stack size 88 bytes, motion_control.o(.text.mc_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = mc_homing_cycle &rArr; limits_go_home &rArr; limits_homing_cycle &rArr; limits_pull_off &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_clear_tlo_reference
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_set_machine_positions
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_signals_merge
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spindle_off
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_coolant_off
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>

<P><STRONG><a name="[28d]"></a>mc_jog_execute</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, motion_control.o(.text.mc_jog_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mc_jog_execute &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_apply_jog_limits
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[274]"></a>mc_line</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, motion_control.o(.text.mc_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_cubic_b_spline
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_canned_drill
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
</UL>

<P><STRONG><a name="[293]"></a>mc_override_ctrl_update</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, motion_control.o(.text.mc_override_ctrl_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mc_override_ctrl_update &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[2da]"></a>mc_parking_motion</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, motion_control.o(.text.mc_parking_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_setup_buffer
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_waypoint_retract
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_hold
</UL>

<P><STRONG><a name="[275]"></a>mc_probe_cycle</STRONG> (Thumb, 830 bytes, Stack size 72 bytes, motion_control.o(.text.mc_probe_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = mc_probe_cycle &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_xy_at_fixture
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
</UL>

<P><STRONG><a name="[254]"></a>mc_reset</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, motion_control.o(.text.mc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_interrupt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_interrupt_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_reset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode
</UL>

<P><STRONG><a name="[29a]"></a>mc_thread</STRONG> (Thumb, 1136 bytes, Stack size 96 bytes, motion_control.o(.text.mc_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = mc_thread &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_thread_doc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[f3]"></a>memcpy_from_flash</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, flash.o(.text.memcpy_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memcpy_from_flash &rArr; DCACHE_InvalidateByRange &rArr; L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[f4]"></a>memcpy_to_flash</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, flash.o(.text.memcpy_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = memcpy_to_flash &rArr; ROM_FLEXSPI_NorFlash_ProgramPage &rArr; DisableGlobalIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_ProgramPage
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[26a]"></a>my_plugin_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, my_plugin.o(.text.my_plugin_init))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>

<P><STRONG><a name="[2e0]"></a>ngc_named_param_get</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ngc_params.o(.text.ngc_named_param_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ngc_named_param_get &rArr; ngc_named_param_get_by_id &rArr; _relative_pos &rArr; gc_get_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ngc_named_param_get_by_id
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_named_ngc_parameter
</UL>

<P><STRONG><a name="[2e1]"></a>ngc_named_param_get_by_id</STRONG> (Thumb, 1136 bytes, Stack size 32 bytes, ngc_params.o(.text.ngc_named_param_get_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ngc_named_param_get_by_id &rArr; _relative_pos &rArr; gc_get_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_relative_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ngc_named_param_get
</UL>

<P><STRONG><a name="[31c]"></a>ngc_param_get</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ngc_params.o(.text.ngc_param_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ngc_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameter
</UL>

<P><STRONG><a name="[2a9]"></a>nvs_buffer_alloc</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nvs_buffer.o(.text.nvs_buffer_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvs_buffer_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[2b7]"></a>nvs_buffer_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nvs_buffer.o(.text.nvs_buffer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvs_buffer_free &rArr; nvs_buffer_sync_physical &rArr; report_message
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_sync_physical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[313]"></a>nvs_buffer_get_physical</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nvs_buffer.o(.text.nvs_buffer_get_physical))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
</UL>

<P><STRONG><a name="[2ab]"></a>nvs_buffer_init</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, nvs_buffer.o(.text.nvs_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nvs_buffer_init &rArr; settings_restore &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_get_byte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_rt_command
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[2e2]"></a>nvs_buffer_sync_physical</STRONG> (Thumb, 828 bytes, Stack size 24 bytes, nvs_buffer.o(.text.nvs_buffer_sync_physical))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvs_buffer_sync_physical &rArr; report_message
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[2c8]"></a>plan_buffer_line</STRONG> (Thumb, 1268 bytes, Stack size 136 bytes, planner.o(.text.plan_buffer_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = plan_buffer_line &rArr; convert_delta_vector_to_unit_vector &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_max_rate_by_axis_maximum
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_acceleration_by_axis_maximum
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labs
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[2d8]"></a>plan_check_full_buffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, planner.o(.text.plan_check_full_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[2ef]"></a>plan_compute_profile_nominal_speed</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, planner.o(.text.plan_compute_profile_nominal_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = plan_compute_profile_nominal_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[2f3]"></a>plan_cycle_reinitialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, planner.o(.text.plan_cycle_reinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plan_cycle_reinitialize &rArr; planner_recalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_feed_override
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_hold
</UL>

<P><STRONG><a name="[2f4]"></a>plan_discard_current_block</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, planner.o(.text.plan_discard_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[291]"></a>plan_feed_override</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, planner.o(.text.plan_feed_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = plan_feed_override &rArr; plan_update_velocity_profile_parameters &rArr; plan_compute_profile_nominal_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[31f]"></a>plan_get_block_buffer_available</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, planner.o(.text.plan_get_block_buffer_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_get_block_buffer_available
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[2ba]"></a>plan_get_current_block</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, planner.o(.text.plan_get_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_get_current_block
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiate_hold
</UL>

<P><STRONG><a name="[34f]"></a>plan_get_exec_block_exit_speed_sqr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, planner.o(.text.plan_get_exec_block_exit_speed_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plan_get_exec_block_exit_speed_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[34e]"></a>plan_get_system_motion_block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(.text.plan_get_system_motion_block))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[2b0]"></a>plan_reset</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, planner.o(.text.plan_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = plan_reset &rArr; plan_reset_buffer &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset_buffer
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cleanup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_motion_cancel
</UL>

<P><STRONG><a name="[2b3]"></a>plan_sync_position</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, planner.o(.text.plan_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plan_sync_position &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_motion_cancel
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_setting
</UL>

<P><STRONG><a name="[2f5]"></a>plan_update_velocity_profile_parameters</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, planner.o(.text.plan_update_velocity_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = plan_update_velocity_profile_parameters &rArr; plan_compute_profile_nominal_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_feed_override
</UL>

<P><STRONG><a name="[e7]"></a>probeGetState</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, driver.o(.text.probeGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = probeGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[2d9]"></a>protocol_auto_cycle_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, protocol.o(.text.protocol_auto_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = protocol_auto_cycle_start &rArr; plan_get_current_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[25b]"></a>protocol_buffer_synchronize</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, protocol.o(.text.protocol_buffer_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_override_ctrl_update
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
</UL>

<P><STRONG><a name="[f6]"></a>protocol_enqueue_gcode</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, protocol.o(.text.protocol_enqueue_gcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = protocol_enqueue_gcode &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[0]"></a>protocol_enqueue_realtime_command</STRONG> (Thumb, 1504 bytes, Stack size 48 bytes, protocol.o(.text.protocol_enqueue_realtime_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = protocol_enqueue_realtime_command &rArr; stream_mpg_enable &rArr;  protocol_enqueue_realtime_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_feed_override
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_accessory_override
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_enqueue_realtime_command
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stream.o(.text.stream_select)
<LI> stream.o(.data.enqueue_realtime_command)
<LI> serial.o(.data.enqueue_realtime_command)
</UL>
<P><STRONG><a name="[2ae]"></a>protocol_enqueue_rt_command</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, protocol.o(.text.protocol_enqueue_rt_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_enqueue_rt_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_driver_interrupt_handler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_stream_cycle_start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_control_cycle_start
</UL>

<P><STRONG><a name="[261]"></a>protocol_exec_rt_system</STRONG> (Thumb, 2094 bytes, Stack size 144 bytes, protocol.o(.text.protocol_exec_rt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_tool_offsets
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid_log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_rt_commands
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_feed_override
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accessory_override
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_override_buffers
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_override
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_feed_override
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spindle_off
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_coolant_off
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[f5]"></a>protocol_execute_noop</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, protocol.o(.text.protocol_execute_noop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = protocol_execute_noop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[260]"></a>protocol_execute_realtime</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, protocol.o(.text.protocol_execute_realtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_sync_physical
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
</UL>

<P><STRONG><a name="[2b6]"></a>protocol_main_loop</STRONG> (Thumb, 1962 bytes, Stack size 72 bytes, protocol.o(.text.protocol_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = protocol_main_loop &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_check
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_line
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_required
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_signals_merge
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[280]"></a>read_float</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, nuts_bolts.o(.text.read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_float
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_value
</UL>

<P><STRONG><a name="[30e]"></a>read_global_settings</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, settings.o(.text.read_global_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = read_global_settings &rArr; spindle_get_count &rArr; spindle_select &rArr; spindle_add_null &rArr; spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_count
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
</UL>

<P><STRONG><a name="[2e4]"></a>read_int</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, system.o(.text.read_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_int &rArr; read_float
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_settings
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_setting_description
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ngc_parameters
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_all_settings
</UL>

<P><STRONG><a name="[f1]"></a>registerPeriphPin</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, driver.o(.text.registerPeriphPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = registerPeriphPin &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[26c]"></a>report_alarm_details</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, report.o(.text.report_alarm_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_alarm_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_alarm
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_all
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_alarms_grblformatted
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_alarms
</UL>

<P><STRONG><a name="[30f]"></a>report_alarm_message</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, report.o(.text.report_alarm_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = report_alarm_message &rArr; appendbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
</UL>

<P><STRONG><a name="[250]"></a>report_build_info</STRONG> (Thumb, 2256 bytes, Stack size 152 bytes, report.o(.text.report_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = report_build_info &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_get_physical
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_all_build_info
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_info
</UL>

<P><STRONG><a name="[1ab]"></a>report_current_limit_state</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, report.o(.text.report_current_limit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = report_current_limit_state &rArr; add_limits &rArr; axis_signals_tostring
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_limits
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[26d]"></a>report_error_details</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, report.o(.text.report_error_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_error_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_errors_grblformatted
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_errors
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_all
</UL>

<P><STRONG><a name="[357]"></a>report_execute_startup_message</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, report.o(.text.report_execute_startup_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = report_execute_startup_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[148]"></a>report_feedback_message</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, report.o(.text.report_feedback_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_feedback_message
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.rodata.report_fns)
</UL>
<P><STRONG><a name="[2ea]"></a>report_gcode_modes</STRONG> (Thumb, 1630 bytes, Stack size 104 bytes, report.o(.text.report_gcode_modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = report_gcode_modes &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_g51_state
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_coord_system
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_g92_active
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_signals_tostring
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_parser_state
</UL>

<P><STRONG><a name="[356]"></a>report_grbl_help</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, report.o(.text.report_grbl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_grbl_help
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[316]"></a>report_grbl_setting</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, report.o(.text.report_grbl_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = report_grbl_setting &rArr; setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[2e5]"></a>report_grbl_settings</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, report.o(.text.report_grbl_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_grbl_settings &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_iterator
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_settings
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_all_settings
</UL>

<P><STRONG><a name="[2e6]"></a>report_help</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, report.o(.text.report_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = report_help &rArr; report_group_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchhere
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_group_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_help
</UL>

<P><STRONG><a name="[31a]"></a>report_home_position</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, report.o(.text.report_home_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_home_position &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[32f]"></a>report_init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, report.o(.text.report_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_inches
</UL>

<P><STRONG><a name="[2aa]"></a>report_init_fns</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, report.o(.text.report_init_fns))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = report_init_fns &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[2b5]"></a>report_init_message</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, report.o(.text.report_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_init_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_select
</UL>

<P><STRONG><a name="[1aa]"></a>report_last_signals_event</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, report.o(.text.report_last_signals_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = report_last_signals_event &rArr; add_limits &rArr; axis_signals_tostring
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_signals_tostring
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_limits
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[27a]"></a>report_message</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, report.o(.text.report_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = report_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_sync_physical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_warning
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_driver_error
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_probe_completed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_warning
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_select
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_message
</UL>

<P><STRONG><a name="[2e8]"></a>report_named_ngc_parameter</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, report.o(.text.report_named_ngc_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = report_named_ngc_parameter &rArr; ngc_named_param_get &rArr; ngc_named_param_get_by_id &rArr; _relative_pos &rArr; gc_get_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ngc_named_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ngc_parameters
</UL>

<P><STRONG><a name="[2e7]"></a>report_ngc_parameter</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, report.o(.text.report_ngc_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = report_ngc_parameter &rArr; ngc_param_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ngc_param_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ngc_parameters
</UL>

<P><STRONG><a name="[2e9]"></a>report_ngc_parameters</STRONG> (Thumb, 606 bytes, Stack size 72 bytes, report.o(.text.report_ngc_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = report_ngc_parameters &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_tool_offsets
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_scaling
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_plane_data
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_home_position
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_coord_system
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ngc_parameters
</UL>

<P><STRONG><a name="[307]"></a>report_pid_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, report.o(.text.report_pid_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_pid_log
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[270]"></a>report_pins</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, report.o(.text.report_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = report_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_pins
</UL>

<P><STRONG><a name="[2dd]"></a>report_probe_parameters</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, report.o(.text.report_probe_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = report_probe_parameters &rArr; system_convert_array_steps_to_mpos
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[305]"></a>report_realtime_status</STRONG> (Thumb, 4468 bytes, Stack size 336 bytes, report.o(.text.report_realtime_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_block_buffer_available
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_signals_merge
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_offset
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_g51_state
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_get_realtime_rate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_coord_system
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_g92_active
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_signals_tostring
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_signals_tostring
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[2eb]"></a>report_setting_description</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, report.o(.text.report_setting_description))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = report_setting_description &rArr; setting_get_description &rArr; setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_description
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_setting_description
</UL>

<P><STRONG><a name="[26e]"></a>report_setting_group_details</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, report.o(.text.report_setting_group_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = report_setting_group_details &rArr; print_setting_group &rArr; settings_is_group_available &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_setting_group
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_groups
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_all
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
</UL>

<P><STRONG><a name="[26f]"></a>report_settings_details</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, report.o(.text.report_settings_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_settings
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_all_settings
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_settings_halformatted
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_settings_grblformatted
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_settings
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumerate_all
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_group_settings
</UL>

<P><STRONG><a name="[1ac]"></a>report_spindle_data</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, report.o(.text.report_spindle_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = report_spindle_data &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[2ed]"></a>report_startup_line</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, report.o(.text.report_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = report_startup_line &rArr; appendbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_startup_lines
</UL>

<P><STRONG><a name="[147]"></a>report_status_message</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, report.o(.text.report_status_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = report_status_message &rArr; appendbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.rodata.report_fns)
</UL>
<P><STRONG><a name="[306]"></a>report_tool_offsets</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, report.o(.text.report_tool_offsets))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = report_tool_offsets
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[2]"></a>serialInit</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, serial.o(.text.serialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data.serial)
</UL>
<P><STRONG><a name="[267]"></a>serialRegisterStreams</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serial.o(.text.serialRegisterStreams))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialRegisterStreams &rArr; stream_register_streams
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_register_streams
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>

<P><STRONG><a name="[f2]"></a>setPeriphPinDescription</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, driver.o(.text.setPeriphPinDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setPeriphPinDescription
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[22d]"></a>set_IRQn_Priority</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp_nvic .o(.text.set_IRQn_Priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_IRQn_Priority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
</UL>

<P><STRONG><a name="[323]"></a>setting_datatype_to_external</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, settings.o(.text.setting_datatype_to_external))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setting_datatype_to_external
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>

<P><STRONG><a name="[322]"></a>setting_get_description</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, settings.o(.text.setting_get_description))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setting_get_description &rArr; setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_description
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>

<P><STRONG><a name="[317]"></a>setting_get_details</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, settings.o(.text.setting_get_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_id
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_available
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_elements
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_element
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_description
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_description
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_setting
</UL>

<P><STRONG><a name="[321]"></a>setting_get_value</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, settings.o(.text.setting_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_get_value &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_places
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting
</UL>

<P><STRONG><a name="[324]"></a>setting_is_list</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, settings.o(.text.setting_is_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setting_is_list
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_element
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>

<P><STRONG><a name="[338]"></a>setting_remove_elements</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, settings.o(.text.setting_remove_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setting_remove_elements &rArr; setting_remove_element &rArr; setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnumentries
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_element
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
</UL>

<P><STRONG><a name="[33b]"></a>setting_validate_me</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, settings.o(.text.setting_validate_me))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setting_validate_me &rArr; validate_value &rArr; read_float
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isintf
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_value
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnumentries
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
</UL>

<P><STRONG><a name="[33d]"></a>settings_add_spindle_type</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, settings.o(.text.settings_add_spindle_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_register
</UL>

<P><STRONG><a name="[dc]"></a>settings_changed</STRONG> (Thumb, 1608 bytes, Stack size 120 bytes, driver.o(.text.settings_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = settings_changed &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_DisableInterrupts
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindleConfig
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortEnableInterrupts
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[2a2]"></a>settings_get_axis_base</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, settings.o(.text.settings_get_axis_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = settings_get_axis_base &rArr; normalize_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_id
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_setting
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float
</UL>

<P><STRONG><a name="[fc]"></a>settings_get_details</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, settings.o(.text.settings_get_details))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_command_help
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_is_group_available
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_description
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[2ac]"></a>settings_init</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, settings.o(.text.settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = settings_init &rArr; settings_restore &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_count
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_add_null
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_elements
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_global_settings
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_element
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
</UL>

<P><STRONG><a name="[2bd]"></a>settings_is_group_available</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, settings.o(.text.settings_is_group_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = settings_is_group_available &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_available
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_group_available
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_setting_group
</UL>

<P><STRONG><a name="[2fd]"></a>settings_iterator</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, settings.o(.text.settings_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = settings_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
</UL>

<P><STRONG><a name="[2fc]"></a>settings_normalize_group</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, settings.o(.text.settings_normalize_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_normalize_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
</UL>

<P><STRONG><a name="[24f]"></a>settings_read_build_info</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, settings.o(.text.settings_read_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = settings_read_build_info &rArr; settings_write_build_info
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_build_info
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_all_build_info
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_info
</UL>

<P><STRONG><a name="[25d]"></a>settings_read_coord_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, settings.o(.text.settings_read_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g30_home
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g28_home
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coord_system_offset
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_xy_at_fixture
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[2ec]"></a>settings_read_startup_line</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, settings.o(.text.settings_read_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = settings_read_startup_line &rArr; settings_write_startup_line &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_startup_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_startup_lines
</UL>

<P><STRONG><a name="[2e3]"></a>settings_restore</STRONG> (Thumb, 476 bytes, Stack size 128 bytes, settings.o(.text.settings_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = settings_restore &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_sync_physical
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_startup_line
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_global
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_build_info
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_reset
</UL>

<P><STRONG><a name="[342]"></a>settings_store_setting</STRONG> (Thumb, 658 bytes, Stack size 56 bytes, settings.o(.text.settings_store_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = settings_store_setting &rArr; setting_validate_me &rArr; validate_value &rArr; read_float
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_validate_me
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_is_string
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_is_core
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[251]"></a>settings_write_build_info</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, settings.o(.text.settings_write_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = settings_write_build_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_info
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
</UL>

<P><STRONG><a name="[296]"></a>settings_write_coord_data</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, settings.o(.text.settings_write_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[3]"></a>settings_write_global</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, settings.o(.text.settings_write_global))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = settings_write_global &rArr; restore_override_backup
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_override_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.data.setting_details)
</UL>
<P><STRONG><a name="[331]"></a>settings_write_startup_line</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, settings.o(.text.settings_write_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = settings_write_startup_line &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
</UL>

<P><STRONG><a name="[303]"></a>sleep_check</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sleep.o(.text.sleep_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sleep_check &rArr; sleep_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[134]"></a>spindleConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver.o(.text.spindleConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata.driver_init.spindle)
</UL>
<P><STRONG><a name="[341]"></a>spindle_add_null</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spindle_control.o(.text.spindle_add_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spindle_add_null &rArr; spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_select
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
</UL>

<P><STRONG><a name="[347]"></a>spindle_compute_pwm_value</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, spindle_control.o(.text.spindle_compute_pwm_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spindle_compute_pwm_value &rArr; invert_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_pwm
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindleGetPWM
</UL>

<P><STRONG><a name="[2bf]"></a>spindle_get_caps</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, spindle_control.o(.text.spindle_get_caps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spindle_get_caps
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_global_settings
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spindle_invert
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_setting_available
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
</UL>

<P><STRONG><a name="[2c0]"></a>spindle_get_count</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spindle_control.o(.text.spindle_get_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spindle_get_count &rArr; spindle_select &rArr; spindle_add_null &rArr; spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_select
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_global_settings
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spindle_type
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_setting_available
</UL>

<P><STRONG><a name="[269]"></a>spindle_register</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, spindle_control.o(.text.spindle_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_add_spindle_type
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_add_null
</UL>

<P><STRONG><a name="[1ad]"></a>spindle_reset_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, system.o(.text.spindle_reset_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spindle_reset_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[327]"></a>spindle_restore</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, spindle_control.o(.text.spindle_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_conditions
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
</UL>

<P><STRONG><a name="[2ad]"></a>spindle_select</STRONG> (Thumb, 498 bytes, Stack size 80 bytes, spindle_control.o(.text.spindle_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spindle_select &rArr; spindle_add_null &rArr; spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spindle_off
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_add_null
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_count
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spindle_type
</UL>

<P><STRONG><a name="[292]"></a>spindle_set_override</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, spindle_control.o(.text.spindle_set_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = spindle_set_override &rArr; spindle_set_state &rArr; set_state &rArr; spindle_set_rpm
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[333]"></a>spindle_set_rpm</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, spindle_control.o(.text.spindle_set_rpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spindle_set_rpm
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>

<P><STRONG><a name="[34c]"></a>spindle_set_state</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, spindle_control.o(.text.spindle_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = spindle_set_state &rArr; set_state &rArr; spindle_set_rpm
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_suspend_manager
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_override
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_restore
</UL>

<P><STRONG><a name="[290]"></a>spindle_sync</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, spindle_control.o(.text.spindle_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = spindle_sync &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spindle_off
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_canned_drill
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[11f]"></a>st_deenergize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stepper.o(.text.st_deenergize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_deenergize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.text.st_go_idle)
</UL>
<P><STRONG><a name="[320]"></a>st_get_realtime_rate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stepper.o(.text.st_get_realtime_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_get_realtime_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[2a6]"></a>st_go_idle</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stepper.o(.text.st_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_driver_interrupt_handler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>

<P><STRONG><a name="[34d]"></a>st_parking_restore_buffer</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stepper.o(.text.st_parking_restore_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_parking_restore_buffer &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_waypoint_retract
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resumed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_restart_retract
</UL>

<P><STRONG><a name="[2db]"></a>st_parking_setup_buffer</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stepper.o(.text.st_parking_setup_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_parking_setup_buffer &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
</UL>

<P><STRONG><a name="[2c9]"></a>st_prep_buffer</STRONG> (Thumb, 3828 bytes, Stack size 144 bytes, stepper.o(.text.st_prep_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_system_motion_block
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_rpm
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
</UL>

<P><STRONG><a name="[2b1]"></a>st_reset</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, stepper.o(.text.st_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_motion_cancel
</UL>

<P><STRONG><a name="[334]"></a>st_rpm_changed</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stepper.o(.text.st_rpm_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = st_rpm_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>

<P><STRONG><a name="[2bc]"></a>st_update_plan_block_parameters</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stepper.o(.text.st_update_plan_block_parameters))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiate_hold
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_cycle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_retract
</UL>

<P><STRONG><a name="[2ca]"></a>st_wake_up</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stepper.o(.text.st_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
</UL>

<P><STRONG><a name="[262]"></a>state_door_reopened</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, state_machine.o(.text.state_door_reopened))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = state_door_reopened
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
</UL>

<P><STRONG><a name="[257]"></a>state_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, state_machine.o(.text.state_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_mpg_enable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_check
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_rt_commands
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_tx_blocking
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_driver_interrupt_handler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_gcode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_interrupt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_interrupt_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_override
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_get_realtime_rate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_delay
</UL>

<P><STRONG><a name="[255]"></a>state_set</STRONG> (Thumb, 894 bytes, Stack size 32 bytes, state_machine.o(.text.state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiate_hold
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_hold
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_raise_alarm
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_lock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_cycle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_toolchanged
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resumed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_motion_cancel
</UL>

<P><STRONG><a name="[302]"></a>state_suspend_manager</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, state_machine.o(.text.state_suspend_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = state_suspend_manager &rArr; spindle_set_state &rArr; set_state &rArr; spindle_set_rpm
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[309]"></a>state_update</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, state_machine.o(.text.state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = state_update &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[101]"></a>stepper_driver_interrupt_handler</STRONG> (Thumb, 1292 bytes, Stack size 48 bytes, stepper.o(.text.stepper_driver_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stepper_driver_interrupt_handler &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_rt_command
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[268]"></a>stream_connect</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stream.o(.text.stream_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stream_connect &rArr; stream_select &rArr; add_connection &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_select
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>

<P><STRONG><a name="[f7]"></a>stream_enqueue_realtime_command</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stream.o(.text.stream_enqueue_realtime_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stream_enqueue_realtime_command &rArr; protocol_enqueue_realtime_command &rArr; stream_mpg_enable &rArr;  protocol_enqueue_realtime_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[12a]"></a>stream_get_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text.stream_get_null))
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.rodata.stream_null_init.stream)
<LI> stream.o(.text.stream_rx_suspend)
</UL>
<P><STRONG><a name="[2ff]"></a>stream_mpg_enable</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, stream.o(.text.stream_mpg_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = stream_mpg_enable &rArr;  protocol_enqueue_realtime_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_realtime_command
</UL>

<P><STRONG><a name="[145]"></a>stream_null_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stream.o(.text.stream_null_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stream_null_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.null_stream)
</UL>
<P><STRONG><a name="[32a]"></a>stream_register_streams</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stream.o(.text.stream_register_streams))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stream_register_streams
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRegisterStreams
</UL>

<P><STRONG><a name="[32b]"></a>stream_rx_suspend</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, stream.o(.text.stream_rx_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stream_rx_suspend &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialSuspendInput
</UL>

<P><STRONG><a name="[102]"></a>stream_tx_blocking</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stream.o(.text.stream_tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stream_tx_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[2d7]"></a>system_apply_jog_limits</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, system.o(.text.system_apply_jog_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_apply_jog_limits
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
</UL>

<P><STRONG><a name="[2cd]"></a>system_check_travel_limits</STRONG> (Thumb, 556 bytes, Stack size 44 bytes, system.o(.text.system_check_travel_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = system_check_travel_limits
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_jog_execute
</UL>

<P><STRONG><a name="[f9]"></a>system_command_help</STRONG> (Thumb, 788 bytes, Stack size 32 bytes, system.o(.text.system_command_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_command_help
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[276]"></a>system_convert_array_steps_to_mpos</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, system.o(.text.system_convert_array_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_xy_at_fixture
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_motion_cancel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_hold
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_setting
</UL>

<P><STRONG><a name="[30c]"></a>system_execute_line</STRONG> (Thumb, 724 bytes, Stack size 80 bytes, system.o(.text.system_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = system_execute_line &rArr; report_help &rArr; report_group_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_setting
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[2a7]"></a>system_execute_startup</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, system.o(.text.system_execute_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>

<P><STRONG><a name="[295]"></a>system_flag_wco_change</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system.o(.text.system_flag_wco_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_set_tool_offset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_inches
</UL>

<P><STRONG><a name="[304]"></a>system_raise_alarm</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system.o(.text.system_raise_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = system_raise_alarm &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_restore
</UL>

<P><STRONG><a name="[2dc]"></a>system_xy_at_fixture</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, system.o(.text.system_xy_at_fixture))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = system_xy_at_fixture &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
</UL>

<P><STRONG><a name="[2c6]"></a>tc_clear_tlo_reference</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tool_change.o(.text.tc_clear_tlo_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tc_clear_tlo_reference &rArr; gc_get_plane_data
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_plane_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[2b4]"></a>tc_init</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, tool_change.o(.text.tc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tc_init &rArr; gc_set_tool_offset &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_set_tool_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_enter
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tool_change_mode
</UL>

<P><STRONG><a name="[358]"></a>tc_probe_workpiece</STRONG> (Thumb, 714 bytes, Stack size 96 bytes, tool_change.o(.text.tc_probe_workpiece))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = tc_probe_workpiece &rArr; mc_probe_cycle &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_xy_at_fixture
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_probe_workpiece
</UL>

<P><STRONG><a name="[2a3]"></a>uitoa</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, nuts_bolts.o(.text.uitoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uitoa
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_driver_error
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_value
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_spindle_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_description
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameter
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_home_position
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pin
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_setting_group
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_setting
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_alarm
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_coord_system
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_value_mm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_value_inch
</UL>

<P><STRONG><a name="[359]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[24a]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr2.o(i.__free$realloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cleanup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_driver_interrupt_handler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_select
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_connection
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_message
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_settings_details
</UL>

<P><STRONG><a name="[2d1]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[25f]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[378]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[2d3]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[265]"></a>__hardfp_fabsf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fabsfc99.o(i.__hardfp_fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_max_rate_by_axis_maximum
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_acceleration_by_axis_maximum
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dist1
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isintf
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[285]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[2ee]"></a>__hardfp_lroundf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lroundf.o(i.__hardfp_lroundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[253]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_thread_doc
</UL>

<P><STRONG><a name="[379]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[284]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[2d4]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[259]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
</UL>

<P><STRONG><a name="[2de]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
</UL>

<P><STRONG><a name="[283]"></a>__hardfp_truncf</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, truncf.o(i.__hardfp_truncf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_truncf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isintf
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
</UL>

<P><STRONG><a name="[1b8]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr2.o(i.__malloc$realloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_alloc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_normalize_block
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_output_command
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_connection
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerPeriphPin
</UL>

<P><STRONG><a name="[362]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[35f]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[35c]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[35e]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[361]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[35a]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[35d]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[37a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[37b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[37c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[35b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d1]"></a>ARM_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[1d3]"></a>ARM_MPU_Enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[1d7]"></a>CLOCK_GetDiv</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[1d5]"></a>CLOCK_GetMux</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetMux
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[1d8]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[1df]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[1c5]"></a>CLOCK_DisableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock_config.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c4]"></a>CLOCK_SetDiv</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1c3]"></a>CLOCK_SetMux</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ca]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, clock_config.o(.text.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1be]"></a>CLOCK_SetRtcXtalFreq</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_SetRtcXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_SetRtcXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1bf]"></a>CLOCK_SetXtalFreq</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_SetXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_SetXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1cf]"></a>IOMUXC_EnableMode</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_EnableMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_EnableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ce]"></a>IOMUXC_MQSConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_MQSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_MQSConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1cd]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetSaiMClkClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1e0]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, clock_config.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[1e1]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pin_mux.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1dc]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[1de]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pin_mux.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[1dd]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin_mux.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[1e2]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pin_mux.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[1f5]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[1f0]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[1fa]"></a>CLOCK_GetPllBypassRefClk</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPllBypassRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLOCK_GetPllBypassRefClk &rArr; CLOCK_GetOscFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[1f8]"></a>CLOCK_GetPllUsb1SWFreq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPllUsb1SWFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CLOCK_GetPllUsb1SWFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1f6]"></a>CLOCK_GetRtcFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetRtcFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1fc]"></a>CLOCK_IsPllBypassed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_IsPllBypassed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_IsPllBypassed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[1fb]"></a>CLOCK_IsPllEnabled</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_IsPllEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_IsPllEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[238]"></a>DelayLoop</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_common_arm.o(.text.DelayLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[1e3]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1eb]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[216]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[1e4]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[1e5]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1ec]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[221]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LPUART_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[1e6]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_lpuart.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[232]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fsl_romapi.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_ProgramPage
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_Erase
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_ClearCache
</UL>

<P><STRONG><a name="[233]"></a>EnableGlobalIRQ</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_romapi.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_ProgramPage
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_Erase
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROM_FLEXSPI_NorFlash_ClearCache
</UL>

<P><STRONG><a name="[200]"></a>L1CACHE_InvalidateDCacheByRange</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fsl_cache.o(.text.L1CACHE_InvalidateDCacheByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
</UL>

<P><STRONG><a name="[1e7]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_qtmr.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1ed]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
</UL>

<P><STRONG><a name="[22f]"></a>QTMR_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_qtmr.o(.text.QTMR_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = QTMR_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
</UL>

<P><STRONG><a name="[1e8]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_qtmr.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[1e9]"></a>CLOCK_ControlGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_pit.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1ee]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_pit.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[224]"></a>PIT_GetInstance</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_pit.o(.text.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[1ea]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_pit.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[217]"></a>GPIO_PinRead</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[23b]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[32d]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_nvic .o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
</UL>

<P><STRONG><a name="[32c]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_nvic .o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
</UL>

<P><STRONG><a name="[32e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_nvic .o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IRQn_Priority
</UL>

<P><STRONG><a name="[23a]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bsp_nvic .o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_NVIC_PriorityGroup
</UL>

<P><STRONG><a name="[206]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_tmr.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
</UL>

<P><STRONG><a name="[207]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bsp_tmr.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[21a]"></a>GPT_ClearStatusFlags</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_gpt.o(.text.GPT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT2_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>CLOCK_SetDiv</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_pit.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[1fe]"></a>CLOCK_SetMux</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_pit.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[208]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_pit.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[22b]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, bsp_pit.o(.text.PIT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[22c]"></a>PIT_EnableInterrupts</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bsp_pit.o(.text.PIT_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[223]"></a>PIT_GetDefaultConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_pit.o(.text.PIT_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PIT_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[228]"></a>PIT_SetTimerPeriod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_pit.o(.text.PIT_SetTimerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PIT_SetTimerPeriod &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
</UL>

<P><STRONG><a name="[209]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bsp_pit.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[20e]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_key_it.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_uart.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
</UL>

<P><STRONG><a name="[20b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bsp_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[203]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, fsl_debug_console.o(.text.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[202]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 942 bytes, Stack size 128 bytes, fsl_debug_console.o(.text.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[204]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fsl_debug_console.o(.text.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[282]"></a>__ARM_isnan</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gcode.o(.text.__ARM_isnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[281]"></a>__ARM_isnanf</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gcode.o(.text.__ARM_isnanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[24d]"></a>add_output_command</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gcode.o(.text.add_output_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = add_output_command &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[288]"></a>gc_get_block_offset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gcode.o(.text.gc_get_block_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_get_block_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[289]"></a>hypot_f</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gcode.o(.text.hypot_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hypot_f &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[299]"></a>init_sync_motion</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, gcode.o(.text.init_sync_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_sync_motion
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[28e]"></a>motion_is_lasercut</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gcode.o(.text.motion_is_lasercut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motion_is_lasercut
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[287]"></a>set_scaling</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, gcode.o(.text.set_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_scaling &rArr; gc_get_g51_state
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_g51_state
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>

<P><STRONG><a name="[fe]"></a>dummy_irq_claim</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, grbllib.o(.text.dummy_irq_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dummy_irq_claim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[103]"></a>report_driver_error</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, grbllib.o(.text.report_driver_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = report_driver_error &rArr; report_message
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbllib.o(.text.grbl_enter)
</UL>
<P><STRONG><a name="[2c4]"></a>homing_signals_select</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, limits.o(.text.homing_signals_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = homing_signals_select
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
</UL>

<P><STRONG><a name="[2c7]"></a>limits_homing_cycle</STRONG> (Thumb, 2116 bytes, Stack size 272 bytes, limits.o(.text.limits_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = limits_homing_cycle &rArr; limits_pull_off &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_set_machine_positions
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_pull_off
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_signals_select
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[2c5]"></a>limits_pull_off</STRONG> (Thumb, 594 bytes, Stack size 120 bytes, limits.o(.text.limits_pull_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = limits_pull_off &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_signals_select
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_cycle
</UL>

<P><STRONG><a name="[252]"></a>calc_thread_doc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, motion_control.o(.text.calc_thread_doc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calc_thread_doc &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_thread
</UL>

<P><STRONG><a name="[264]"></a>dist1</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, motion_control.o(.text.dist1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dist1
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabsf
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_cubic_b_spline
</UL>

<P><STRONG><a name="[271]"></a>eval_bezier</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, motion_control.o(.text.eval_bezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eval_bezier &rArr; interp
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_cubic_b_spline
</UL>

<P><STRONG><a name="[272]"></a>interp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, motion_control.o(.text.interp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = interp
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_bezier
</UL>

<P><STRONG><a name="[247]"></a>_relative_pos</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ngc_params.o(.text._relative_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _relative_pos &rArr; gc_get_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ngc_named_param_get_by_id
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_position
</UL>

<P><STRONG><a name="[13f]"></a>coord_system</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ngc_params.o(.text.coord_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = coord_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[140]"></a>coord_system_offset</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ngc_params.o(.text.coord_system_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = coord_system_offset &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[13a]"></a>g28_home</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ngc_params.o(.text.g28_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = g28_home &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[13b]"></a>g30_home</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ngc_params.o(.text.g30_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = g30_home &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[13e]"></a>g92_offset</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ngc_params.o(.text.g92_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = g92_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[13d]"></a>g92_offset_applied</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ngc_params.o(.text.g92_offset_applied))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = g92_offset_applied
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[141]"></a>m66_result</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ngc_params.o(.text.m66_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m66_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[138]"></a>probe_coord</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, ngc_params.o(.text.probe_coord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = probe_coord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[139]"></a>probe_result</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ngc_params.o(.text.probe_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = probe_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[13c]"></a>scaling_factors</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ngc_params.o(.text.scaling_factors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scaling_factors
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_scaling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[142]"></a>tool_number</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ngc_params.o(.text.tool_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tool_number
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[143]"></a>tool_offset</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ngc_params.o(.text.tool_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tool_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[144]"></a>work_position</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ngc_params.o(.text.work_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = work_position &rArr; _relative_pos &rArr; gc_get_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_relative_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ngc_params.o(.rodata.ngc_ro_params)
</UL>
<P><STRONG><a name="[108]"></a>memcpy_from_ram</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, nvs_buffer.o(.text.memcpy_from_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = memcpy_from_ram &rArr; calc_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_get_byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvs_buffer.o(.text.nvs_buffer_init)
</UL>
<P><STRONG><a name="[107]"></a>memcpy_to_ram</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, nvs_buffer.o(.text.memcpy_to_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = memcpy_to_ram &rArr; ram_put_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_put_byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvs_buffer.o(.text.nvs_buffer_init)
</UL>
<P><STRONG><a name="[109]"></a>nvs_warning</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nvs_buffer.o(.text.nvs_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvs_warning &rArr; report_message
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvs_buffer.o(.text.nvs_buffer_init)
</UL>
<P><STRONG><a name="[105]"></a>ram_get_byte</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, nvs_buffer.o(.text.ram_get_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ram_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_ram
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvs_buffer.o(.text.nvs_buffer_init)
</UL>
<P><STRONG><a name="[106]"></a>ram_put_byte</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, nvs_buffer.o(.text.ram_put_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ram_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvs_buffer.o(.text.nvs_buffer_init)
</UL>
<P><STRONG><a name="[2c1]"></a>limit_acceleration_by_axis_maximum</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, planner.o(.text.limit_acceleration_by_axis_maximum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = limit_acceleration_by_axis_maximum
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabsf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[2c2]"></a>limit_max_rate_by_axis_maximum</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, planner.o(.text.limit_max_rate_by_axis_maximum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = limit_max_rate_by_axis_maximum
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabsf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[2f2]"></a>plan_cleanup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, planner.o(.text.plan_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset_buffer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
</UL>

<P><STRONG><a name="[2f0]"></a>plan_compute_profile_parameters</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, planner.o(.text.plan_compute_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plan_compute_profile_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[2f6]"></a>plan_reset_buffer</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, planner.o(.text.plan_reset_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = plan_reset_buffer &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
</UL>

<P><STRONG><a name="[2f1]"></a>planner_recalculate</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, planner.o(.text.planner_recalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = planner_recalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[301]"></a>protocol_exec_rt_suspend</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, protocol.o(.text.protocol_exec_rt_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_suspend_manager
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_check
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[308]"></a>protocol_execute_rt_commands</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, protocol.o(.text.protocol_execute_rt_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_execute_rt_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[30d]"></a>recheck_line</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, protocol.o(.text.recheck_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = recheck_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[24b]"></a>add_limits</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, report.o(.text.add_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = add_limits &rArr; axis_signals_tostring
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_signals_tostring
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_last_signals_event
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_limit_state
</UL>

<P><STRONG><a name="[310]"></a>appendbuf</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, report.o(.text.appendbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = appendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting
</UL>

<P><STRONG><a name="[24c]"></a>axis_signals_tostring</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, report.o(.text.axis_signals_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = axis_signals_tostring
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_limits
</UL>

<P><STRONG><a name="[10f]"></a>cmp_alarms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, report.o(.text.cmp_alarms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_alarms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_alarm_details)
</UL>
<P><STRONG><a name="[110]"></a>cmp_errors</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, report.o(.text.cmp_errors))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_errors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_error_details)
</UL>
<P><STRONG><a name="[119]"></a>cmp_setting_group_id</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, report.o(.text.cmp_setting_group_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_setting_group_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_setting_group_details)
</UL>
<P><STRONG><a name="[11a]"></a>cmp_setting_group_name</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, report.o(.text.cmp_setting_group_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmp_setting_group_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_setting_group_details)
</UL>
<P><STRONG><a name="[10c]"></a>cmp_settings</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, report.o(.text.cmp_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_settings
</UL>
<BR>[Address Reference Count : 2]<UL><LI> report.o(.text.report_grbl_settings)
<LI> report.o(.text.print_settings_details)
</UL>
<P><STRONG><a name="[31b]"></a>control_signals_tostring</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, report.o(.text.control_signals_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = control_signals_tostring
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_last_signals_event
</UL>

<P><STRONG><a name="[112]"></a>get_axis_value_inches</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, report.o(.text.get_axis_value_inches))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_axis_value_inches &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_init)
</UL>
<P><STRONG><a name="[113]"></a>get_axis_value_mm</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, report.o(.text.get_axis_value_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_axis_value_mm &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_init)
</UL>
<P><STRONG><a name="[114]"></a>get_axis_values_inches</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, report.o(.text.get_axis_values_inches))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_axis_values_inches &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_init)
</UL>
<P><STRONG><a name="[115]"></a>get_axis_values_mm</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, report.o(.text.get_axis_values_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_axis_values_mm &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_init)
</UL>
<P><STRONG><a name="[31e]"></a>get_pinname</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, report.o(.text.get_pinname))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pinname
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pin
</UL>

<P><STRONG><a name="[116]"></a>get_rate_value_inch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, report.o(.text.get_rate_value_inch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_rate_value_inch &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_init)
</UL>
<P><STRONG><a name="[117]"></a>get_rate_value_mm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, report.o(.text.get_rate_value_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_rate_value_mm &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_init)
</UL>
<P><STRONG><a name="[314]"></a>is_g92_active</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, report.o(.text.is_g92_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_g92_active
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>

<P><STRONG><a name="[2ce]"></a>map_coord_system</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, report.o(.text.map_coord_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[2f7]"></a>print_alarm</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, report.o(.text.print_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_alarm &rArr; write_quoted
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_quoted
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
</UL>

<P><STRONG><a name="[2f9]"></a>print_error</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, report.o(.text.print_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_error &rArr; write_quoted
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_quoted
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
</UL>

<P><STRONG><a name="[111]"></a>print_setting</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, report.o(.text.print_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_setting &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_grbl_settings)
</UL>
<P><STRONG><a name="[2fa]"></a>print_setting_group</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, report.o(.text.print_setting_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = print_setting_group &rArr; settings_is_group_available &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_is_group_available
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
</UL>

<P><STRONG><a name="[2fb]"></a>print_settings_details</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, report.o(.text.print_settings_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = print_settings_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_details
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_normalize_group
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_iterator
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
</UL>

<P><STRONG><a name="[10d]"></a>print_sorted</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, report.o(.text.print_sorted))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = print_sorted &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.print_settings_details)
</UL>
<P><STRONG><a name="[10e]"></a>print_unsorted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, report.o(.text.print_unsorted))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = print_unsorted &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.print_settings_details)
</UL>
<P><STRONG><a name="[311]"></a>report_bitfield</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, report.o(.text.report_bitfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
</UL>

<P><STRONG><a name="[318]"></a>report_group_settings</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, report.o(.text.report_group_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = report_group_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchhere
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
</UL>

<P><STRONG><a name="[118]"></a>report_pin</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, report.o(.text.report_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = report_pin &rArr; get_pinname
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pinname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.text.report_pins)
</UL>
<P><STRONG><a name="[146]"></a>report_setting</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, report.o(.text.report_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_setting &rArr; setting_get_value &rArr; ftoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_value
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> report.o(.rodata.report_fns)
</UL>
<P><STRONG><a name="[2fe]"></a>report_settings_detail</STRONG> (Thumb, 2618 bytes, Stack size 184 bytes, report.o(.text.report_settings_detail))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uitoa
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_is_list
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_description
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_datatype_to_external
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_quoted
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_bitfield
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_unsorted
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sorted
</UL>

<P><STRONG><a name="[2f8]"></a>write_quoted</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, report.o(.text.write_quoted))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_quoted
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_detail
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_alarm
</UL>

<P><STRONG><a name="[2a0]"></a>get_decimal_places</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, settings.o(.text.get_decimal_places))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_decimal_places
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_value
</UL>

<P><STRONG><a name="[174]"></a>get_float</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, settings.o(.text.get_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_float &rArr; settings_get_axis_base &rArr; normalize_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_axis_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[159]"></a>get_int</STRONG> (Thumb, 906 bytes, Stack size 20 bytes, settings.o(.text.get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[335]"></a>is_available</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(.text.is_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_available
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_is_group_available
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
</UL>

<P><STRONG><a name="[172]"></a>is_group_available</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, settings.o(.text.is_group_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = is_group_available &rArr; settings_is_group_available &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_is_group_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[15a]"></a>is_setting_available</STRONG> (Thumb, 644 bytes, Stack size 56 bytes, settings.o(.text.is_setting_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = is_setting_available &rArr; spindle_get_count &rArr; spindle_select &rArr; spindle_add_null &rArr; spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_count
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_id
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[2be]"></a>normalize_id</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, settings.o(.text.normalize_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = normalize_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_axis_base
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_setting_available
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
</UL>

<P><STRONG><a name="[337]"></a>remove_element</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, settings.o(.text.remove_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = remove_element
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_element
</UL>

<P><STRONG><a name="[345]"></a>restore_override_backup</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, settings.o(.text.restore_override_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = restore_override_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_global
</UL>

<P><STRONG><a name="[173]"></a>set_axis_setting</STRONG> (Thumb, 884 bytes, Stack size 40 bytes, settings.o(.text.set_axis_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_axis_setting &rArr; settings_get_axis_base &rArr; normalize_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_get_axis_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[162]"></a>set_control_disable_pullup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, settings.o(.text.set_control_disable_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_control_disable_pullup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[160]"></a>set_control_invert</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, settings.o(.text.set_control_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_control_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[169]"></a>set_enable_legacy_rt_commands</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, settings.o(.text.set_enable_legacy_rt_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_enable_legacy_rt_commands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[170]"></a>set_force_initialization_alarm</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, settings.o(.text.set_force_initialization_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_force_initialization_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[177]"></a>set_g92_disable_persistence</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, settings.o(.text.set_g92_disable_persistence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_g92_disable_persistence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[15c]"></a>set_ganged_dir_invert</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, settings.o(.text.set_ganged_dir_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_ganged_dir_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[165]"></a>set_hard_limits_enable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, settings.o(.text.set_hard_limits_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_hard_limits_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[16f]"></a>set_hold_actions</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, settings.o(.text.set_hold_actions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_hold_actions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[16c]"></a>set_homing_cycle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, settings.o(.text.set_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_homing_cycle &rArr; limits_set_homing_axes
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_set_homing_axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[166]"></a>set_homing_enable</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, settings.o(.text.set_homing_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_homing_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[16a]"></a>set_jog_soft_limited</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, settings.o(.text.set_jog_soft_limited))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_jog_soft_limited
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[167]"></a>set_mode</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, settings.o(.text.set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_mode &rArr; spindle_get_caps
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[16b]"></a>set_parking_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, settings.o(.text.set_parking_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_parking_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[171]"></a>set_probe_allow_feed_override</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, settings.o(.text.set_probe_allow_feed_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_probe_allow_feed_override
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[163]"></a>set_probe_disable_pullup</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, settings.o(.text.set_probe_disable_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_probe_disable_pullup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[158]"></a>set_probe_invert</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, settings.o(.text.set_probe_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_probe_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[15b]"></a>set_pwm_mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, settings.o(.text.set_pwm_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_pwm_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[15d]"></a>set_pwm_options</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, settings.o(.text.set_pwm_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_pwm_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[15f]"></a>set_report_inches</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, settings.o(.text.set_report_inches))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = set_report_inches &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[15e]"></a>set_report_mask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(.text.set_report_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_report_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[16d]"></a>set_restore_overrides</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, settings.o(.text.set_restore_overrides))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_restore_overrides
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[16e]"></a>set_sleep_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, settings.o(.text.set_sleep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_sleep_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[164]"></a>set_soft_limits_enable</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, settings.o(.text.set_soft_limits_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_soft_limits_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[161]"></a>set_spindle_invert</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, settings.o(.text.set_spindle_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_spindle_invert &rArr; spindle_get_caps
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_caps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[178]"></a>set_spindle_type</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, settings.o(.text.set_spindle_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = set_spindle_type &rArr; spindle_get_count &rArr; spindle_select &rArr; spindle_add_null &rArr; spindle_register &rArr; settings_add_spindle_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_select
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[168]"></a>set_stepper_deenergize_mask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, settings.o(.text.set_stepper_deenergize_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_stepper_deenergize_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[175]"></a>set_tool_change_mode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, settings.o(.text.set_tool_change_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = set_tool_change_mode &rArr; tc_init &rArr; gc_set_tool_offset &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[176]"></a>set_tool_change_probing_distance</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, settings.o(.text.set_tool_change_probing_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_tool_change_probing_distance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.rodata.setting_detail)
</UL>
<P><STRONG><a name="[344]"></a>setting_is_core</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, settings.o(.text.setting_is_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setting_is_core
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
</UL>

<P><STRONG><a name="[343]"></a>setting_is_string</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, settings.o(.text.setting_is_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setting_is_string
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_setting
</UL>

<P><STRONG><a name="[336]"></a>setting_remove_element</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, settings.o(.text.setting_remove_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_remove_element &rArr; setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_element
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_is_list
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_get_details
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_elements
</UL>

<P><STRONG><a name="[339]"></a>strnumentries</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, settings.o(.text.strnumentries))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strnumentries
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_validate_me
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_remove_elements
</UL>

<P><STRONG><a name="[33c]"></a>validate_value</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, settings.o(.text.validate_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = validate_value &rArr; read_float
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_validate_me
</UL>

<P><STRONG><a name="[11e]"></a>fall_asleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sleep.o(.text.fall_asleep))
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text.sleep_execute)
</UL>
<P><STRONG><a name="[346]"></a>sleep_execute</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, sleep.o(.text.sleep_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_check
</UL>

<P><STRONG><a name="[34b]"></a>invert_pwm</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, spindle_control.o(.text.invert_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invert_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[17b]"></a>null_get_pwm</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, spindle_control.o(.text.null_get_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_get_pwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spindle_control.o(.rodata.spindle_add_null.spindle)
</UL>
<P><STRONG><a name="[17a]"></a>null_get_state</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, spindle_control.o(.text.null_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spindle_control.o(.rodata.spindle_add_null.spindle)
</UL>
<P><STRONG><a name="[179]"></a>null_set_state</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, spindle_control.o(.text.null_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = null_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spindle_control.o(.rodata.spindle_add_null.spindle)
</UL>
<P><STRONG><a name="[17c]"></a>null_update_pwm</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, spindle_control.o(.text.null_update_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_update_pwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spindle_control.o(.rodata.spindle_add_null.spindle)
</UL>
<P><STRONG><a name="[17d]"></a>null_update_rpm</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, spindle_control.o(.text.null_update_rpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_update_rpm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spindle_control.o(.rodata.spindle_add_null.spindle)
</UL>
<P><STRONG><a name="[332]"></a>set_state</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, spindle_control.o(.text.set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = set_state &rArr; spindle_set_rpm
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_rpm_changed
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_rpm
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
</UL>

<P><STRONG><a name="[326]"></a>restart_retract</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, state_machine.o(.text.restart_retract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = restart_retract
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_await_resumed
</UL>

<P><STRONG><a name="[104]"></a>state_await_hold</STRONG> (Thumb, 1108 bytes, Stack size 96 bytes, state_machine.o(.text.state_await_hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> state_machine.o(.text.state_await_restart_retract)
<LI> state_machine.o(.text.initiate_hold)
</UL>
<P><STRONG><a name="[123]"></a>state_await_motion_cancel</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, state_machine.o(.text.state_await_motion_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = state_await_motion_cancel &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_cycle)
</UL>
<P><STRONG><a name="[11b]"></a>state_await_restart_retract</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, state_machine.o(.text.state_await_restart_retract))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = state_await_restart_retract &rArr; st_parking_restore_buffer &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_restore_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.restart_retract)
</UL>
<P><STRONG><a name="[121]"></a>state_await_resume</STRONG> (Thumb, 912 bytes, Stack size 88 bytes, state_machine.o(.text.state_await_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = state_await_resume &rArr; spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spindle_off
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_restore_buffer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_restore
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 4]<UL><LI> state_machine.o(.text.state_set)
<LI> state_machine.o(.text.state_suspend_manager)
<LI> state_machine.o(.text.state_await_waypoint_retract)
<LI> state_machine.o(.text.state_await_hold)
</UL>
<P><STRONG><a name="[124]"></a>state_await_resumed</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, state_machine.o(.text.state_await_resumed))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = state_await_resumed &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_restore_buffer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_retract
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_restore)
</UL>
<P><STRONG><a name="[126]"></a>state_await_toolchanged</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, state_machine.o(.text.state_await_toolchanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = state_await_toolchanged &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_set)
</UL>
<P><STRONG><a name="[120]"></a>state_await_waypoint_retract</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, state_machine.o(.text.state_await_waypoint_retract))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = state_await_waypoint_retract &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_restore_buffer
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_await_hold)
</UL>
<P><STRONG><a name="[125]"></a>state_cycle</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, state_machine.o(.text.state_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = state_cycle &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_set)
</UL>
<P><STRONG><a name="[4]"></a>state_idle</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, state_machine.o(.text.state_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = state_idle &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> state_machine.o(.text.state_set)
<LI> state_machine.o(.data.stateHandler)
</UL>
<P><STRONG><a name="[127]"></a>state_noop</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, state_machine.o(.text.state_noop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = state_noop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_set)
</UL>
<P><STRONG><a name="[122]"></a>state_restore</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, state_machine.o(.text.state_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = state_restore &rArr; state_restore_conditions &rArr; spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parking_motion
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_parking_restore_buffer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_conditions
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_retract
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_machine.o(.text.state_await_resume)
</UL>
<P><STRONG><a name="[350]"></a>state_restore_conditions</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, state_machine.o(.text.state_restore_conditions))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = state_restore_conditions &rArr; spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore
</UL>

<P><STRONG><a name="[128]"></a>output_message</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stepper.o(.text.output_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = output_message &rArr; report_message
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.text.stepper_driver_interrupt_handler)
</UL>
<P><STRONG><a name="[249]"></a>add_connection</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stream.o(.text.add_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = add_connection &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_select
</UL>

<P><STRONG><a name="[129]"></a>await_toolchange_ack</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stream.o(.text.await_toolchange_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = await_toolchange_ack &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.stream_rx_suspend)
</UL>
<P><STRONG><a name="[185]"></a>null_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stream.o(.text.null_count))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[181]"></a>null_enqueue_rt_command</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stream.o(.text.null_enqueue_rt_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = null_enqueue_rt_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[180]"></a>null_put_c</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stream.o(.text.null_put_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_put_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[17e]"></a>null_rx_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text.null_rx_free))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[186]"></a>null_set_baudrate</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stream.o(.text.null_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_set_baudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[182]"></a>null_set_rt_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stream.o(.text.null_set_rt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = null_set_rt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[183]"></a>null_suspend_disable</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stream.o(.text.null_suspend_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_suspend_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[184]"></a>null_write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stream.o(.text.null_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = null_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[17f]"></a>null_write_string</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stream.o(.text.null_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata.stream_null_init.stream)
</UL>
<P><STRONG><a name="[355]"></a>stream_select</STRONG> (Thumb, 830 bytes, Stack size 48 bytes, stream.o(.text.stream_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = stream_select &rArr; add_connection &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_connection
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_connect
</UL>

<P><STRONG><a name="[12b]"></a>stream_write_all</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stream.o(.text.stream_write_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stream_write_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.stream_select)
</UL>
<P><STRONG><a name="[19a]"></a>build_info</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, system.o(.text.build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = build_info &rArr; report_build_info &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_build_info
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[190]"></a>check_mode</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, system.o(.text.check_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = check_mode &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[191]"></a>disable_lock</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, system.o(.text.disable_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = disable_lock &rArr; state_set &rArr; state_await_hold &rArr; mc_parking_motion &rArr; st_prep_buffer &rArr; plan_discard_current_block &rArr; plan_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_required
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_signals_merge
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[197]"></a>enter_sleep</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, system.o(.text.enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enter_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a0]"></a>enumerate_alarms</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system.o(.text.enumerate_alarms))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = enumerate_alarms &rArr; report_alarm_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a1]"></a>enumerate_alarms_grblformatted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system.o(.text.enumerate_alarms_grblformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = enumerate_alarms_grblformatted &rArr; report_alarm_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a8]"></a>enumerate_all</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system.o(.text.enumerate_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = enumerate_all &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a2]"></a>enumerate_errors</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system.o(.text.enumerate_errors))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = enumerate_errors &rArr; report_error_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a3]"></a>enumerate_errors_grblformatted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system.o(.text.enumerate_errors_grblformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = enumerate_errors_grblformatted &rArr; report_error_details &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_error_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a4]"></a>enumerate_groups</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, system.o(.text.enumerate_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = enumerate_groups &rArr; report_setting_group_details &rArr; print_setting_group &rArr; settings_is_group_available &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_group_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a9]"></a>enumerate_pins</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, system.o(.text.enumerate_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enumerate_pins &rArr; report_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a5]"></a>enumerate_settings</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system.o(.text.enumerate_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = enumerate_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a6]"></a>enumerate_settings_grblformatted</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system.o(.text.enumerate_settings_grblformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = enumerate_settings_grblformatted &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[1a7]"></a>enumerate_settings_halformatted</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system.o(.text.enumerate_settings_halformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = enumerate_settings_halformatted &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[2a4]"></a>go_home</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, system.o(.text.go_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = go_home &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_homing_required
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_z
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_y
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_x
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home
</UL>

<P><STRONG><a name="[192]"></a>home</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, system.o(.text.home))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = home &rArr; go_home &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[193]"></a>home_x</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, system.o(.text.home_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = home_x &rArr; go_home &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[194]"></a>home_y</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, system.o(.text.home_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = home_y &rArr; go_home &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[195]"></a>home_z</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, system.o(.text.home_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = home_z &rArr; go_home &rArr; system_execute_startup &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[2b8]"></a>hypot_f</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, system.o(.text.hypot_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hypot_f &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_xy_at_fixture
</UL>

<P><STRONG><a name="[188]"></a>jog</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, system.o(.text.jog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = jog &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[19b]"></a>output_all_build_info</STRONG> (Thumb, 32 bytes, Stack size 96 bytes, system.o(.text.output_all_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = output_all_build_info &rArr; report_build_info &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[18b]"></a>output_all_settings</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, system.o(.text.output_all_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = output_all_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[196]"></a>output_help</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system.o(.text.output_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = output_help &rArr; report_help &rArr; report_group_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_help
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[189]"></a>output_ngc_parameters</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, system.o(.text.output_ngc_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = output_ngc_parameters &rArr; report_ngc_parameters &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameter
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_named_ngc_parameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[187]"></a>output_parser_state</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, system.o(.text.output_parser_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = output_parser_state &rArr; report_gcode_modes &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[18c]"></a>output_setting_description</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, system.o(.text.output_setting_description))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = output_setting_description &rArr; report_setting_description &rArr; setting_get_description &rArr; setting_get_details &rArr; is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_setting_description
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[18a]"></a>output_settings</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, system.o(.text.output_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = output_settings &rArr; report_settings_details &rArr; report_settings_detail &rArr; report_bitfield &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_settings_details
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[19d]"></a>output_startup_lines</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, system.o(.text.output_startup_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = output_startup_lines &rArr; settings_read_startup_line &rArr; settings_write_startup_line &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[330]"></a>set_startup_line</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, system.o(.text.set_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = set_startup_line &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_normalize_block
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_block
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_startup_line
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line1
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line0
</UL>

<P><STRONG><a name="[19e]"></a>set_startup_line0</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(.text.set_startup_line0))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = set_startup_line0 &rArr; set_startup_line &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[19f]"></a>set_startup_line1</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(.text.set_startup_line1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = set_startup_line1 &rArr; set_startup_line &rArr; gc_execute_block &rArr; mc_arc &rArr;  mc_arc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_startup_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[198]"></a>set_tool_reference</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, system.o(.text.set_tool_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_tool_reference &rArr; gc_get_plane_data
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_plane_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[19c]"></a>settings_reset</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, system.o(.text.settings_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = settings_reset &rArr; settings_restore &rArr; settings_write_coord_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[18d]"></a>toggle_block_delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system.o(.text.toggle_block_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggle_block_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[18f]"></a>toggle_optional_stop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system.o(.text.toggle_optional_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggle_optional_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[18e]"></a>toggle_single_block</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, system.o(.text.toggle_single_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggle_single_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[199]"></a>tool_probe_workpiece</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, system.o(.text.tool_probe_workpiece))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = tool_probe_workpiece &rArr; tc_probe_workpiece &rArr; mc_probe_cycle &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_probe_workpiece
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.rodata.sys_commands)
</UL>
<P><STRONG><a name="[279]"></a>change_completed</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, tool_change.o(.text.change_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = change_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
</UL>

<P><STRONG><a name="[131]"></a>execute_probe</STRONG> (Thumb, 650 bytes, Stack size 112 bytes, tool_change.o(.text.execute_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = execute_probe &rArr; restore &rArr; spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_set_tool_offset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_completed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tool_change.o(.text.trap_control_cycle_start)
<LI> tool_change.o(.text.trap_stream_cycle_start)
</UL>
<P><STRONG><a name="[132]"></a>execute_restore</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tool_change.o(.text.execute_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = execute_restore &rArr; restore &rArr; spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_completed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tool_change.o(.text.trap_control_cycle_start)
<LI> tool_change.o(.text.trap_stream_cycle_start)
</UL>
<P><STRONG><a name="[133]"></a>execute_warning</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tool_change.o(.text.execute_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = execute_warning &rArr; report_message
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tool_change.o(.text.trap_control_cycle_start)
<LI> tool_change.o(.text.trap_stream_cycle_start)
</UL>
<P><STRONG><a name="[130]"></a>on_probe_completed</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tool_change.o(.text.on_probe_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = on_probe_completed &rArr; gc_set_tool_offset &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_message
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_set_tool_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.tool_change)
</UL>
<P><STRONG><a name="[12e]"></a>on_toolchange_ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tool_change.o(.text.on_toolchange_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_toolchange_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.tc_init)
</UL>
<P><STRONG><a name="[12f]"></a>reset</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, tool_change.o(.text.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reset &rArr; change_completed
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_completed
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.tc_init)
</UL>
<P><STRONG><a name="[278]"></a>restore</STRONG> (Thumb, 338 bytes, Stack size 96 bytes, tool_change.o(.text.restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = restore &rArr; spindle_restore &rArr; delay_sec &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_offset
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_restore
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_probe
</UL>

<P><STRONG><a name="[12d]"></a>tool_change</STRONG> (Thumb, 784 bytes, Stack size 144 bytes, tool_change.o(.text.tool_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tool_change &rArr; mc_line &rArr; limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; protocol_exec_rt_system &rArr; report_realtime_status &rArr; map_coord_system &rArr; uitoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_plane_data
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_get_offset
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.tc_init)
</UL>
<P><STRONG><a name="[12c]"></a>tool_select</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tool_change.o(.text.tool_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tool_select &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.tc_init)
</UL>
<P><STRONG><a name="[10a]"></a>trap_control_cycle_start</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tool_change.o(.text.trap_control_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = trap_control_cycle_start &rArr; protocol_enqueue_rt_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_rt_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.on_toolchange_ack)
</UL>
<P><STRONG><a name="[10b]"></a>trap_stream_cycle_start</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, tool_change.o(.text.trap_stream_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trap_stream_cycle_start &rArr; protocol_enqueue_rt_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_enqueue_rt_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tool_change.o(.text.on_toolchange_ack)
</UL>
<P><STRONG><a name="[20c]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, driver.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
</UL>

<P><STRONG><a name="[20f]"></a>GPIO_GetPinsInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, driver.o(.text.GPIO_GetPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_GetPinsInterruptFlags &rArr; GPIO_PortGetInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>GPIO_PinRead</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probeGetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemGetState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindleGetState
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitsGetState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolantGetState
</UL>

<P><STRONG><a name="[210]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, driver.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[340]"></a>GPIO_PortEnableInterrupts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, driver.o(.text.GPIO_PortEnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortEnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
</UL>

<P><STRONG><a name="[213]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, driver.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>

<P><STRONG><a name="[226]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, driver.o(.text.PIT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperWakeUp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperCyclesPerTick
</UL>

<P><STRONG><a name="[352]"></a>PIT_DisableInterrupts</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, driver.o(.text.PIT_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperGoIdle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperCyclesPerTick
</UL>

<P><STRONG><a name="[353]"></a>PIT_EnableInterrupts</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, driver.o(.text.PIT_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperWakeUp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperCyclesPerTick
</UL>

<P><STRONG><a name="[225]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(.text.PIT_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[229]"></a>PIT_SetTimerPeriod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, driver.o(.text.PIT_SetTimerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PIT_SetTimerPeriod &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperWakeUp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperCyclesPerTick
</UL>

<P><STRONG><a name="[354]"></a>PIT_StartTimer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, driver.o(.text.PIT_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperWakeUp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperCyclesPerTick
</UL>

<P><STRONG><a name="[351]"></a>PIT_StopTimer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, driver.o(.text.PIT_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperGoIdle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperCyclesPerTick
</UL>

<P><STRONG><a name="[211]"></a>QTMR_StartTimer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, driver.o(.text.QTMR_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStartDelayed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperPulseStart
</UL>

<P><STRONG><a name="[33f]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, driver.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_changed
</UL>

<P><STRONG><a name="[20d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, driver.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[eb]"></a>__disable_irq</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, driver.o(.text.__disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __disable_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[ea]"></a>__enable_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver.o(.text.__enable_irq))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[ed]"></a>bitsClearAtomic</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, driver.o(.text.bitsClearAtomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitsClearAtomic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[ec]"></a>bitsSetAtomic</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, driver.o(.text.bitsSetAtomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bitsSetAtomic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e6]"></a>coolantGetState</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, driver.o(.text.coolantGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = coolantGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e5]"></a>coolantSetState</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, driver.o(.text.coolantSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = coolantSetState &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[db]"></a>driver_delay</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, driver.o(.text.driver_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = driver_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[da]"></a>driver_setup</STRONG> (Thumb, 580 bytes, Stack size 56 bytes, driver.o(.text.driver_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = driver_setup &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_TIMER_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRn_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[f0]"></a>enumeratePins</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, driver.o(.text.enumeratePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = enumeratePins &rArr; port2char &rArr; GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[ef]"></a>getElapsedTicks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver.o(.text.getElapsedTicks))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e3]"></a>limitsEnable</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, driver.o(.text.limitsEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = limitsEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e4]"></a>limitsGetState</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, driver.o(.text.limitsGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = limitsGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e2]"></a>motor_iterator</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver.o(.text.motor_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = motor_iterator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[26b]"></a>port2char</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver.o(.text.port2char))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = port2char &rArr; GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enumeratePins
</UL>

<P><STRONG><a name="[e8]"></a>probeConfigure</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, driver.o(.text.probeConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = probeConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[136]"></a>spindleGetPWM</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver.o(.text.spindleGetPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = spindleGetPWM &rArr; spindle_compute_pwm_value &rArr; invert_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata.driver_init.spindle)
</UL>
<P><STRONG><a name="[11c]"></a>spindleGetState</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, driver.o(.text.spindleGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = spindleGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.text.settings_changed)
<LI> driver.o(.rodata.driver_init.spindle)
</UL>
<P><STRONG><a name="[135]"></a>spindleSetState</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, driver.o(.text.spindleSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = spindleSetState &rArr; spindle_dir &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_on
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_off
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata.driver_init.spindle)
</UL>
<P><STRONG><a name="[349]"></a>spindle_dir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, driver.o(.text.spindle_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = spindle_dir &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindleSetState
</UL>

<P><STRONG><a name="[348]"></a>spindle_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, driver.o(.text.spindle_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = spindle_off &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindleSetState
</UL>

<P><STRONG><a name="[34a]"></a>spindle_on</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, driver.o(.text.spindle_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = spindle_on &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindleSetState
</UL>

<P><STRONG><a name="[137]"></a>spindle_set_speed</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, driver.o(.text.spindle_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = spindle_set_speed &rArr; spindle_on &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_on
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata.driver_init.spindle)
</UL>
<P><STRONG><a name="[e0]"></a>stepperCyclesPerTick</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, driver.o(.text.stepperCyclesPerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = stepperCyclesPerTick &rArr; PIT_SetTimerPeriod &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StopTimer
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StartTimer
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_EnableInterrupts
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DisableInterrupts
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[df]"></a>stepperEnable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, driver.o(.text.stepperEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = stepperEnable &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperWakeUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[de]"></a>stepperGoIdle</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, driver.o(.text.stepperGoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = stepperGoIdle &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StopTimer
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e1]"></a>stepperPulseStart</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, driver.o(.text.stepperPulseStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = stepperPulseStart &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.text.settings_changed)
<LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[11d]"></a>stepperPulseStartDelayed</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, driver.o(.text.stepperPulseStartDelayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = stepperPulseStartDelayed &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.settings_changed)
</UL>
<P><STRONG><a name="[dd]"></a>stepperWakeUp</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, driver.o(.text.stepperWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = stepperWakeUp &rArr; stepperEnable &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepperEnable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StartTimer
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_EnableInterrupts
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[e9]"></a>systemGetState</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, driver.o(.text.systemGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = systemGetState &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[ee]"></a>valueSetAtomic</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, driver.o(.text.valueSetAtomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = valueSetAtomic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text.driver_init)
</UL>
<P><STRONG><a name="[328]"></a>LPUART_EnableRx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, serial.o(.text.LPUART_EnableRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_EnableRx
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialDisable
</UL>

<P><STRONG><a name="[21c]"></a>LPUART_ReadByte</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, serial.o(.text.LPUART_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPUART_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[329]"></a>LPUART_WriteByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial.o(.text.LPUART_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPutC
</UL>

<P><STRONG><a name="[153]"></a>serialDisable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial.o(.text.serialDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serialDisable &rArr; LPUART_EnableRx
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[14c]"></a>serialEnqueueRtCommand</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, serial.o(.text.serialEnqueueRtCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialEnqueueRtCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[14d]"></a>serialGetC</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, serial.o(.text.serialGetC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialGetC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[14b]"></a>serialPutC</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, serial.o(.text.serialPutC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serialPutC &rArr; LPUART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWriteS
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[14f]"></a>serialRxCancel</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, serial.o(.text.serialRxCancel))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[154]"></a>serialRxCount</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, serial.o(.text.serialRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[14e]"></a>serialRxFlush</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial.o(.text.serialRxFlush))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[149]"></a>serialRxFree</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, serial.o(.text.serialRxFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serialRxFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[157]"></a>serialSetBaudRate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, serial.o(.text.serialSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = serialSetBaudRate &rArr; BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetBaudRate
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[150]"></a>serialSetRtHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serial.o(.text.serialSetRtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serialSetRtHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[151]"></a>serialSuspendInput</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial.o(.text.serialSuspendInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serialSuspendInput &rArr; stream_rx_suspend &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_rx_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[155]"></a>serialTxCount</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, serial.o(.text.serialTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[156]"></a>serialTxFlush</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial.o(.text.serialTxFlush))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[152]"></a>serialWrite</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, serial.o(.text.serialWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serialWrite &rArr; serialPutC &rArr; LPUART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPutC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[14a]"></a>serialWriteS</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, serial.o(.text.serialWriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serialWriteS &rArr; serialPutC &rArr; LPUART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPutC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata.serialInit.stream)
</UL>
<P><STRONG><a name="[363]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr2.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
